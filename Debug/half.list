
half.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a08  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001be0  08001be0  00011be0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001bf0  08001bf0  00011bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001bf8  08001bf8  00011bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001bfc  08001bfc  00011bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08001c00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000198  2000000c  08001c0c  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200001a4  08001c0c  000201a4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000efe2  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000023d4  00000000  00000000  0002f01e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006fb9  00000000  00000000  000313f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000a40  00000000  00000000  000383b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000ca0  00000000  00000000  00038df0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00005528  00000000  00000000  00039a90  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003d99  00000000  00000000  0003efb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00042d51  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001ea4  00000000  00000000  00042dd0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08001bc8 	.word	0x08001bc8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08001bc8 	.word	0x08001bc8

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b97a 	b.w	8000524 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	468c      	mov	ip, r1
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	9e08      	ldr	r6, [sp, #32]
 8000254:	2b00      	cmp	r3, #0
 8000256:	d151      	bne.n	80002fc <__udivmoddi4+0xb4>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d96d      	bls.n	800033a <__udivmoddi4+0xf2>
 800025e:	fab2 fe82 	clz	lr, r2
 8000262:	f1be 0f00 	cmp.w	lr, #0
 8000266:	d00b      	beq.n	8000280 <__udivmoddi4+0x38>
 8000268:	f1ce 0c20 	rsb	ip, lr, #32
 800026c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000270:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000274:	fa02 f70e 	lsl.w	r7, r2, lr
 8000278:	ea4c 0c05 	orr.w	ip, ip, r5
 800027c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000280:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000284:	0c25      	lsrs	r5, r4, #16
 8000286:	fbbc f8fa 	udiv	r8, ip, sl
 800028a:	fa1f f987 	uxth.w	r9, r7
 800028e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000292:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000296:	fb08 f309 	mul.w	r3, r8, r9
 800029a:	42ab      	cmp	r3, r5
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x6c>
 800029e:	19ed      	adds	r5, r5, r7
 80002a0:	f108 32ff 	add.w	r2, r8, #4294967295
 80002a4:	f080 8123 	bcs.w	80004ee <__udivmoddi4+0x2a6>
 80002a8:	42ab      	cmp	r3, r5
 80002aa:	f240 8120 	bls.w	80004ee <__udivmoddi4+0x2a6>
 80002ae:	f1a8 0802 	sub.w	r8, r8, #2
 80002b2:	443d      	add	r5, r7
 80002b4:	1aed      	subs	r5, r5, r3
 80002b6:	b2a4      	uxth	r4, r4
 80002b8:	fbb5 f0fa 	udiv	r0, r5, sl
 80002bc:	fb0a 5510 	mls	r5, sl, r0, r5
 80002c0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002c4:	fb00 f909 	mul.w	r9, r0, r9
 80002c8:	45a1      	cmp	r9, r4
 80002ca:	d909      	bls.n	80002e0 <__udivmoddi4+0x98>
 80002cc:	19e4      	adds	r4, r4, r7
 80002ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80002d2:	f080 810a 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80002d6:	45a1      	cmp	r9, r4
 80002d8:	f240 8107 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80002dc:	3802      	subs	r0, #2
 80002de:	443c      	add	r4, r7
 80002e0:	eba4 0409 	sub.w	r4, r4, r9
 80002e4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002e8:	2100      	movs	r1, #0
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d061      	beq.n	80003b2 <__udivmoddi4+0x16a>
 80002ee:	fa24 f40e 	lsr.w	r4, r4, lr
 80002f2:	2300      	movs	r3, #0
 80002f4:	6034      	str	r4, [r6, #0]
 80002f6:	6073      	str	r3, [r6, #4]
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0xc8>
 8000300:	2e00      	cmp	r6, #0
 8000302:	d054      	beq.n	80003ae <__udivmoddi4+0x166>
 8000304:	2100      	movs	r1, #0
 8000306:	e886 0021 	stmia.w	r6, {r0, r5}
 800030a:	4608      	mov	r0, r1
 800030c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000310:	fab3 f183 	clz	r1, r3
 8000314:	2900      	cmp	r1, #0
 8000316:	f040 808e 	bne.w	8000436 <__udivmoddi4+0x1ee>
 800031a:	42ab      	cmp	r3, r5
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xdc>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80fa 	bhi.w	8000518 <__udivmoddi4+0x2d0>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb65 0503 	sbc.w	r5, r5, r3
 800032a:	2001      	movs	r0, #1
 800032c:	46ac      	mov	ip, r5
 800032e:	2e00      	cmp	r6, #0
 8000330:	d03f      	beq.n	80003b2 <__udivmoddi4+0x16a>
 8000332:	e886 1010 	stmia.w	r6, {r4, ip}
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	b912      	cbnz	r2, 8000342 <__udivmoddi4+0xfa>
 800033c:	2701      	movs	r7, #1
 800033e:	fbb7 f7f2 	udiv	r7, r7, r2
 8000342:	fab7 fe87 	clz	lr, r7
 8000346:	f1be 0f00 	cmp.w	lr, #0
 800034a:	d134      	bne.n	80003b6 <__udivmoddi4+0x16e>
 800034c:	1beb      	subs	r3, r5, r7
 800034e:	0c3a      	lsrs	r2, r7, #16
 8000350:	fa1f fc87 	uxth.w	ip, r7
 8000354:	2101      	movs	r1, #1
 8000356:	fbb3 f8f2 	udiv	r8, r3, r2
 800035a:	0c25      	lsrs	r5, r4, #16
 800035c:	fb02 3318 	mls	r3, r2, r8, r3
 8000360:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000364:	fb0c f308 	mul.w	r3, ip, r8
 8000368:	42ab      	cmp	r3, r5
 800036a:	d907      	bls.n	800037c <__udivmoddi4+0x134>
 800036c:	19ed      	adds	r5, r5, r7
 800036e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x132>
 8000374:	42ab      	cmp	r3, r5
 8000376:	f200 80d1 	bhi.w	800051c <__udivmoddi4+0x2d4>
 800037a:	4680      	mov	r8, r0
 800037c:	1aed      	subs	r5, r5, r3
 800037e:	b2a3      	uxth	r3, r4
 8000380:	fbb5 f0f2 	udiv	r0, r5, r2
 8000384:	fb02 5510 	mls	r5, r2, r0, r5
 8000388:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800038c:	fb0c fc00 	mul.w	ip, ip, r0
 8000390:	45a4      	cmp	ip, r4
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0x15c>
 8000394:	19e4      	adds	r4, r4, r7
 8000396:	f100 33ff 	add.w	r3, r0, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x15a>
 800039c:	45a4      	cmp	ip, r4
 800039e:	f200 80b8 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 80003a2:	4618      	mov	r0, r3
 80003a4:	eba4 040c 	sub.w	r4, r4, ip
 80003a8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ac:	e79d      	b.n	80002ea <__udivmoddi4+0xa2>
 80003ae:	4631      	mov	r1, r6
 80003b0:	4630      	mov	r0, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	f1ce 0420 	rsb	r4, lr, #32
 80003ba:	fa05 f30e 	lsl.w	r3, r5, lr
 80003be:	fa07 f70e 	lsl.w	r7, r7, lr
 80003c2:	fa20 f804 	lsr.w	r8, r0, r4
 80003c6:	0c3a      	lsrs	r2, r7, #16
 80003c8:	fa25 f404 	lsr.w	r4, r5, r4
 80003cc:	ea48 0803 	orr.w	r8, r8, r3
 80003d0:	fbb4 f1f2 	udiv	r1, r4, r2
 80003d4:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003d8:	fb02 4411 	mls	r4, r2, r1, r4
 80003dc:	fa1f fc87 	uxth.w	ip, r7
 80003e0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003e4:	fb01 f30c 	mul.w	r3, r1, ip
 80003e8:	42ab      	cmp	r3, r5
 80003ea:	fa00 f40e 	lsl.w	r4, r0, lr
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x1bc>
 80003f0:	19ed      	adds	r5, r5, r7
 80003f2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003f6:	f080 808a 	bcs.w	800050e <__udivmoddi4+0x2c6>
 80003fa:	42ab      	cmp	r3, r5
 80003fc:	f240 8087 	bls.w	800050e <__udivmoddi4+0x2c6>
 8000400:	3902      	subs	r1, #2
 8000402:	443d      	add	r5, r7
 8000404:	1aeb      	subs	r3, r5, r3
 8000406:	fa1f f588 	uxth.w	r5, r8
 800040a:	fbb3 f0f2 	udiv	r0, r3, r2
 800040e:	fb02 3310 	mls	r3, r2, r0, r3
 8000412:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000416:	fb00 f30c 	mul.w	r3, r0, ip
 800041a:	42ab      	cmp	r3, r5
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x1e6>
 800041e:	19ed      	adds	r5, r5, r7
 8000420:	f100 38ff 	add.w	r8, r0, #4294967295
 8000424:	d26f      	bcs.n	8000506 <__udivmoddi4+0x2be>
 8000426:	42ab      	cmp	r3, r5
 8000428:	d96d      	bls.n	8000506 <__udivmoddi4+0x2be>
 800042a:	3802      	subs	r0, #2
 800042c:	443d      	add	r5, r7
 800042e:	1aeb      	subs	r3, r5, r3
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	e78f      	b.n	8000356 <__udivmoddi4+0x10e>
 8000436:	f1c1 0720 	rsb	r7, r1, #32
 800043a:	fa22 f807 	lsr.w	r8, r2, r7
 800043e:	408b      	lsls	r3, r1
 8000440:	fa05 f401 	lsl.w	r4, r5, r1
 8000444:	ea48 0303 	orr.w	r3, r8, r3
 8000448:	fa20 fe07 	lsr.w	lr, r0, r7
 800044c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000450:	40fd      	lsrs	r5, r7
 8000452:	ea4e 0e04 	orr.w	lr, lr, r4
 8000456:	fbb5 f9fc 	udiv	r9, r5, ip
 800045a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800045e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000462:	fa1f f883 	uxth.w	r8, r3
 8000466:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800046a:	fb09 f408 	mul.w	r4, r9, r8
 800046e:	42ac      	cmp	r4, r5
 8000470:	fa02 f201 	lsl.w	r2, r2, r1
 8000474:	fa00 fa01 	lsl.w	sl, r0, r1
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x244>
 800047a:	18ed      	adds	r5, r5, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	d243      	bcs.n	800050a <__udivmoddi4+0x2c2>
 8000482:	42ac      	cmp	r4, r5
 8000484:	d941      	bls.n	800050a <__udivmoddi4+0x2c2>
 8000486:	f1a9 0902 	sub.w	r9, r9, #2
 800048a:	441d      	add	r5, r3
 800048c:	1b2d      	subs	r5, r5, r4
 800048e:	fa1f fe8e 	uxth.w	lr, lr
 8000492:	fbb5 f0fc 	udiv	r0, r5, ip
 8000496:	fb0c 5510 	mls	r5, ip, r0, r5
 800049a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800049e:	fb00 f808 	mul.w	r8, r0, r8
 80004a2:	45a0      	cmp	r8, r4
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x26e>
 80004a6:	18e4      	adds	r4, r4, r3
 80004a8:	f100 35ff 	add.w	r5, r0, #4294967295
 80004ac:	d229      	bcs.n	8000502 <__udivmoddi4+0x2ba>
 80004ae:	45a0      	cmp	r8, r4
 80004b0:	d927      	bls.n	8000502 <__udivmoddi4+0x2ba>
 80004b2:	3802      	subs	r0, #2
 80004b4:	441c      	add	r4, r3
 80004b6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ba:	eba4 0408 	sub.w	r4, r4, r8
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	454c      	cmp	r4, r9
 80004c4:	46c6      	mov	lr, r8
 80004c6:	464d      	mov	r5, r9
 80004c8:	d315      	bcc.n	80004f6 <__udivmoddi4+0x2ae>
 80004ca:	d012      	beq.n	80004f2 <__udivmoddi4+0x2aa>
 80004cc:	b156      	cbz	r6, 80004e4 <__udivmoddi4+0x29c>
 80004ce:	ebba 030e 	subs.w	r3, sl, lr
 80004d2:	eb64 0405 	sbc.w	r4, r4, r5
 80004d6:	fa04 f707 	lsl.w	r7, r4, r7
 80004da:	40cb      	lsrs	r3, r1
 80004dc:	431f      	orrs	r7, r3
 80004de:	40cc      	lsrs	r4, r1
 80004e0:	6037      	str	r7, [r6, #0]
 80004e2:	6074      	str	r4, [r6, #4]
 80004e4:	2100      	movs	r1, #0
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	4618      	mov	r0, r3
 80004ec:	e6f8      	b.n	80002e0 <__udivmoddi4+0x98>
 80004ee:	4690      	mov	r8, r2
 80004f0:	e6e0      	b.n	80002b4 <__udivmoddi4+0x6c>
 80004f2:	45c2      	cmp	sl, r8
 80004f4:	d2ea      	bcs.n	80004cc <__udivmoddi4+0x284>
 80004f6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004fa:	eb69 0503 	sbc.w	r5, r9, r3
 80004fe:	3801      	subs	r0, #1
 8000500:	e7e4      	b.n	80004cc <__udivmoddi4+0x284>
 8000502:	4628      	mov	r0, r5
 8000504:	e7d7      	b.n	80004b6 <__udivmoddi4+0x26e>
 8000506:	4640      	mov	r0, r8
 8000508:	e791      	b.n	800042e <__udivmoddi4+0x1e6>
 800050a:	4681      	mov	r9, r0
 800050c:	e7be      	b.n	800048c <__udivmoddi4+0x244>
 800050e:	4601      	mov	r1, r0
 8000510:	e778      	b.n	8000404 <__udivmoddi4+0x1bc>
 8000512:	3802      	subs	r0, #2
 8000514:	443c      	add	r4, r7
 8000516:	e745      	b.n	80003a4 <__udivmoddi4+0x15c>
 8000518:	4608      	mov	r0, r1
 800051a:	e708      	b.n	800032e <__udivmoddi4+0xe6>
 800051c:	f1a8 0802 	sub.w	r8, r8, #2
 8000520:	443d      	add	r5, r7
 8000522:	e72b      	b.n	800037c <__udivmoddi4+0x134>

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000528:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800052a:	4a0e      	ldr	r2, [pc, #56]	; (8000564 <HAL_InitTick+0x3c>)
 800052c:	4b0e      	ldr	r3, [pc, #56]	; (8000568 <HAL_InitTick+0x40>)
{
 800052e:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000530:	7818      	ldrb	r0, [r3, #0]
 8000532:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000536:	fbb3 f3f0 	udiv	r3, r3, r0
 800053a:	6810      	ldr	r0, [r2, #0]
 800053c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000540:	f000 f9d0 	bl	80008e4 <HAL_SYSTICK_Config>
 8000544:	4604      	mov	r4, r0
 8000546:	b958      	cbnz	r0, 8000560 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000548:	2d0f      	cmp	r5, #15
 800054a:	d809      	bhi.n	8000560 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800054c:	4602      	mov	r2, r0
 800054e:	4629      	mov	r1, r5
 8000550:	f04f 30ff 	mov.w	r0, #4294967295
 8000554:	f000 f992 	bl	800087c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000558:	4b04      	ldr	r3, [pc, #16]	; (800056c <HAL_InitTick+0x44>)
 800055a:	4620      	mov	r0, r4
 800055c:	601d      	str	r5, [r3, #0]
 800055e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000560:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000562:	bd38      	pop	{r3, r4, r5, pc}
 8000564:	20000008 	.word	0x20000008
 8000568:	20000000 	.word	0x20000000
 800056c:	20000004 	.word	0x20000004

08000570 <HAL_Init>:
{
 8000570:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000572:	4b0b      	ldr	r3, [pc, #44]	; (80005a0 <HAL_Init+0x30>)
 8000574:	681a      	ldr	r2, [r3, #0]
 8000576:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800057a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800057c:	681a      	ldr	r2, [r3, #0]
 800057e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000582:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000584:	681a      	ldr	r2, [r3, #0]
 8000586:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800058a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800058c:	2003      	movs	r0, #3
 800058e:	f000 f963 	bl	8000858 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000592:	2000      	movs	r0, #0
 8000594:	f7ff ffc8 	bl	8000528 <HAL_InitTick>
  HAL_MspInit();
 8000598:	f001 f960 	bl	800185c <HAL_MspInit>
}
 800059c:	2000      	movs	r0, #0
 800059e:	bd08      	pop	{r3, pc}
 80005a0:	40023c00 	.word	0x40023c00

080005a4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80005a4:	4a03      	ldr	r2, [pc, #12]	; (80005b4 <HAL_IncTick+0x10>)
 80005a6:	4b04      	ldr	r3, [pc, #16]	; (80005b8 <HAL_IncTick+0x14>)
 80005a8:	6811      	ldr	r1, [r2, #0]
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	440b      	add	r3, r1
 80005ae:	6013      	str	r3, [r2, #0]
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	20000028 	.word	0x20000028
 80005b8:	20000000 	.word	0x20000000

080005bc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005bc:	4b01      	ldr	r3, [pc, #4]	; (80005c4 <HAL_GetTick+0x8>)
 80005be:	6818      	ldr	r0, [r3, #0]
}
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	20000028 	.word	0x20000028

080005c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80005c8:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80005ca:	4604      	mov	r4, r0
 80005cc:	2800      	cmp	r0, #0
 80005ce:	f000 809b 	beq.w	8000708 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80005d2:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80005d4:	b925      	cbnz	r5, 80005e0 <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80005d6:	f000 ffb3 	bl	8001540 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80005da:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80005dc:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80005e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80005e2:	06db      	lsls	r3, r3, #27
 80005e4:	f100 808e 	bmi.w	8000704 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80005e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80005ea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80005ee:	f023 0302 	bic.w	r3, r3, #2
 80005f2:	f043 0302 	orr.w	r3, r3, #2
 80005f6:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80005f8:	4b44      	ldr	r3, [pc, #272]	; (800070c <HAL_ADC_Init+0x144>)
 80005fa:	685a      	ldr	r2, [r3, #4]
 80005fc:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000600:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000602:	685a      	ldr	r2, [r3, #4]
 8000604:	6861      	ldr	r1, [r4, #4]
 8000606:	430a      	orrs	r2, r1
 8000608:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800060a:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800060c:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800060e:	685a      	ldr	r2, [r3, #4]
 8000610:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000614:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000616:	685a      	ldr	r2, [r3, #4]
 8000618:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800061c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800061e:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000620:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000622:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000626:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000628:	685a      	ldr	r2, [r3, #4]
 800062a:	430a      	orrs	r2, r1
 800062c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800062e:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000630:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000632:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000636:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000638:	689a      	ldr	r2, [r3, #8]
 800063a:	430a      	orrs	r2, r1
 800063c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800063e:	4934      	ldr	r1, [pc, #208]	; (8000710 <HAL_ADC_Init+0x148>)
 8000640:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000642:	428a      	cmp	r2, r1
 8000644:	d052      	beq.n	80006ec <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000646:	6899      	ldr	r1, [r3, #8]
 8000648:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 800064c:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800064e:	6899      	ldr	r1, [r3, #8]
 8000650:	430a      	orrs	r2, r1
 8000652:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000654:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000656:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000658:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800065c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800065e:	689a      	ldr	r2, [r3, #8]
 8000660:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000662:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000664:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000666:	7e21      	ldrb	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000668:	f022 0202 	bic.w	r2, r2, #2
 800066c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800066e:	689a      	ldr	r2, [r3, #8]
 8000670:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000674:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000676:	f894 2020 	ldrb.w	r2, [r4, #32]
 800067a:	2a00      	cmp	r2, #0
 800067c:	d03e      	beq.n	80006fc <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800067e:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000680:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000682:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000686:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000688:	685a      	ldr	r2, [r3, #4]
 800068a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800068e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000690:	685a      	ldr	r2, [r3, #4]
 8000692:	3901      	subs	r1, #1
 8000694:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000698:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800069a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800069c:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800069e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80006a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80006a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006a6:	3901      	subs	r1, #1
 80006a8:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 80006ac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80006ae:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80006b0:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80006b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80006b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80006ba:	689a      	ldr	r2, [r3, #8]
 80006bc:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 80006c0:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80006c2:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80006c4:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80006c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80006ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80006cc:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80006ce:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80006d0:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 80006d4:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80006d6:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80006d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80006da:	f023 0303 	bic.w	r3, r3, #3
 80006de:	f043 0301 	orr.w	r3, r3, #1
 80006e2:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80006e4:	2300      	movs	r3, #0
 80006e6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 80006ea:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80006ec:	689a      	ldr	r2, [r3, #8]
 80006ee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80006f2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80006f4:	689a      	ldr	r2, [r3, #8]
 80006f6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80006fa:	e7b2      	b.n	8000662 <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80006fc:	685a      	ldr	r2, [r3, #4]
 80006fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000702:	e7c9      	b.n	8000698 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 8000704:	2001      	movs	r0, #1
 8000706:	e7ed      	b.n	80006e4 <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 8000708:	2001      	movs	r0, #1
}
 800070a:	bd38      	pop	{r3, r4, r5, pc}
 800070c:	40012300 	.word	0x40012300
 8000710:	0f000001 	.word	0x0f000001

08000714 <HAL_ADC_ConfigChannel>:
{
 8000714:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 8000716:	2300      	movs	r3, #0
 8000718:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800071a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800071e:	2b01      	cmp	r3, #1
 8000720:	d06e      	beq.n	8000800 <HAL_ADC_ConfigChannel+0xec>
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000722:	680d      	ldr	r5, [r1, #0]
 8000724:	6804      	ldr	r4, [r0, #0]
 8000726:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 8000728:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 800072a:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 800072c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8000730:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000732:	d92a      	bls.n	800078a <HAL_ADC_ConfigChannel+0x76>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000734:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8000738:	68e7      	ldr	r7, [r4, #12]
 800073a:	3b1e      	subs	r3, #30
 800073c:	f04f 0e07 	mov.w	lr, #7
 8000740:	fa0e fe03 	lsl.w	lr, lr, r3
 8000744:	ea27 070e 	bic.w	r7, r7, lr
 8000748:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800074a:	68e7      	ldr	r7, [r4, #12]
 800074c:	fa02 f303 	lsl.w	r3, r2, r3
 8000750:	433b      	orrs	r3, r7
 8000752:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 8000754:	684a      	ldr	r2, [r1, #4]
 8000756:	2a06      	cmp	r2, #6
 8000758:	ea4f 0382 	mov.w	r3, r2, lsl #2
 800075c:	d825      	bhi.n	80007aa <HAL_ADC_ConfigChannel+0x96>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800075e:	4413      	add	r3, r2
 8000760:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8000762:	1f59      	subs	r1, r3, #5
 8000764:	231f      	movs	r3, #31
 8000766:	408b      	lsls	r3, r1
 8000768:	ea27 0303 	bic.w	r3, r7, r3
 800076c:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800076e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000770:	fa06 f101 	lsl.w	r1, r6, r1
 8000774:	4311      	orrs	r1, r2
 8000776:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000778:	4b32      	ldr	r3, [pc, #200]	; (8000844 <HAL_ADC_ConfigChannel+0x130>)
 800077a:	429c      	cmp	r4, r3
 800077c:	d034      	beq.n	80007e8 <HAL_ADC_ConfigChannel+0xd4>
  __HAL_UNLOCK(hadc);
 800077e:	2300      	movs	r3, #0
 8000780:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8000784:	4618      	mov	r0, r3
}
 8000786:	b003      	add	sp, #12
 8000788:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800078a:	6927      	ldr	r7, [r4, #16]
 800078c:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000790:	f04f 0e07 	mov.w	lr, #7
 8000794:	fa0e fe03 	lsl.w	lr, lr, r3
 8000798:	ea27 070e 	bic.w	r7, r7, lr
 800079c:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800079e:	6927      	ldr	r7, [r4, #16]
 80007a0:	fa02 f303 	lsl.w	r3, r2, r3
 80007a4:	433b      	orrs	r3, r7
 80007a6:	6123      	str	r3, [r4, #16]
 80007a8:	e7d4      	b.n	8000754 <HAL_ADC_ConfigChannel+0x40>
  else if (sConfig->Rank < 13U)
 80007aa:	2a0c      	cmp	r2, #12
 80007ac:	d80e      	bhi.n	80007cc <HAL_ADC_ConfigChannel+0xb8>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80007ae:	4413      	add	r3, r2
 80007b0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80007b2:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 80007b6:	231f      	movs	r3, #31
 80007b8:	4093      	lsls	r3, r2
 80007ba:	ea21 0303 	bic.w	r3, r1, r3
 80007be:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80007c0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80007c2:	fa06 f202 	lsl.w	r2, r6, r2
 80007c6:	431a      	orrs	r2, r3
 80007c8:	6322      	str	r2, [r4, #48]	; 0x30
 80007ca:	e7d5      	b.n	8000778 <HAL_ADC_ConfigChannel+0x64>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80007cc:	4413      	add	r3, r2
 80007ce:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80007d0:	3b41      	subs	r3, #65	; 0x41
 80007d2:	221f      	movs	r2, #31
 80007d4:	409a      	lsls	r2, r3
 80007d6:	ea21 0202 	bic.w	r2, r1, r2
 80007da:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80007dc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80007de:	fa06 f103 	lsl.w	r1, r6, r3
 80007e2:	4311      	orrs	r1, r2
 80007e4:	62e1      	str	r1, [r4, #44]	; 0x2c
 80007e6:	e7c7      	b.n	8000778 <HAL_ADC_ConfigChannel+0x64>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80007e8:	2d12      	cmp	r5, #18
 80007ea:	d10b      	bne.n	8000804 <HAL_ADC_ConfigChannel+0xf0>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80007ec:	4b16      	ldr	r3, [pc, #88]	; (8000848 <HAL_ADC_ConfigChannel+0x134>)
 80007ee:	685a      	ldr	r2, [r3, #4]
 80007f0:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80007f4:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80007f6:	685a      	ldr	r2, [r3, #4]
 80007f8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	e7be      	b.n	800077e <HAL_ADC_ConfigChannel+0x6a>
  __HAL_LOCK(hadc);
 8000800:	2002      	movs	r0, #2
 8000802:	e7c0      	b.n	8000786 <HAL_ADC_ConfigChannel+0x72>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000804:	4b11      	ldr	r3, [pc, #68]	; (800084c <HAL_ADC_ConfigChannel+0x138>)
 8000806:	429d      	cmp	r5, r3
 8000808:	d001      	beq.n	800080e <HAL_ADC_ConfigChannel+0xfa>
 800080a:	2d11      	cmp	r5, #17
 800080c:	d1b7      	bne.n	800077e <HAL_ADC_ConfigChannel+0x6a>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800080e:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <HAL_ADC_ConfigChannel+0x134>)
 8000810:	685a      	ldr	r2, [r3, #4]
 8000812:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8000816:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000818:	685a      	ldr	r2, [r3, #4]
 800081a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800081e:	605a      	str	r2, [r3, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000820:	4b0a      	ldr	r3, [pc, #40]	; (800084c <HAL_ADC_ConfigChannel+0x138>)
 8000822:	429d      	cmp	r5, r3
 8000824:	d1ab      	bne.n	800077e <HAL_ADC_ConfigChannel+0x6a>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000826:	4b0a      	ldr	r3, [pc, #40]	; (8000850 <HAL_ADC_ConfigChannel+0x13c>)
 8000828:	4a0a      	ldr	r2, [pc, #40]	; (8000854 <HAL_ADC_ConfigChannel+0x140>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	fbb3 f2f2 	udiv	r2, r3, r2
 8000830:	230a      	movs	r3, #10
 8000832:	4353      	muls	r3, r2
        counter--;
 8000834:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8000836:	9b01      	ldr	r3, [sp, #4]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d0a0      	beq.n	800077e <HAL_ADC_ConfigChannel+0x6a>
        counter--;
 800083c:	9b01      	ldr	r3, [sp, #4]
 800083e:	3b01      	subs	r3, #1
 8000840:	e7f8      	b.n	8000834 <HAL_ADC_ConfigChannel+0x120>
 8000842:	bf00      	nop
 8000844:	40012000 	.word	0x40012000
 8000848:	40012300 	.word	0x40012300
 800084c:	10000012 	.word	0x10000012
 8000850:	20000008 	.word	0x20000008
 8000854:	000f4240 	.word	0x000f4240

08000858 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000858:	4a07      	ldr	r2, [pc, #28]	; (8000878 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800085a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800085c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000860:	041b      	lsls	r3, r3, #16
 8000862:	0c1b      	lsrs	r3, r3, #16
 8000864:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000868:	0200      	lsls	r0, r0, #8
 800086a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800086e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000872:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000874:	60d3      	str	r3, [r2, #12]
 8000876:	4770      	bx	lr
 8000878:	e000ed00 	.word	0xe000ed00

0800087c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800087c:	4b17      	ldr	r3, [pc, #92]	; (80008dc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800087e:	b530      	push	{r4, r5, lr}
 8000880:	68dc      	ldr	r4, [r3, #12]
 8000882:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000886:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800088a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800088c:	2b04      	cmp	r3, #4
 800088e:	bf28      	it	cs
 8000890:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000892:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000894:	f04f 0501 	mov.w	r5, #1
 8000898:	fa05 f303 	lsl.w	r3, r5, r3
 800089c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008a0:	bf8c      	ite	hi
 80008a2:	3c03      	subhi	r4, #3
 80008a4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008a6:	4019      	ands	r1, r3
 80008a8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008aa:	fa05 f404 	lsl.w	r4, r5, r4
 80008ae:	3c01      	subs	r4, #1
 80008b0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80008b2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008b4:	ea42 0201 	orr.w	r2, r2, r1
 80008b8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008bc:	bfad      	iteet	ge
 80008be:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c2:	f000 000f 	andlt.w	r0, r0, #15
 80008c6:	4b06      	ldrlt	r3, [pc, #24]	; (80008e0 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008cc:	bfb5      	itete	lt
 80008ce:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80008d8:	bd30      	pop	{r4, r5, pc}
 80008da:	bf00      	nop
 80008dc:	e000ed00 	.word	0xe000ed00
 80008e0:	e000ed14 	.word	0xe000ed14

080008e4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008e4:	3801      	subs	r0, #1
 80008e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80008ea:	d20a      	bcs.n	8000902 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ee:	4a07      	ldr	r2, [pc, #28]	; (800090c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008f0:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f2:	21f0      	movs	r1, #240	; 0xf0
 80008f4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008f8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008fa:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008fc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000902:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	e000e010 	.word	0xe000e010
 800090c:	e000ed00 	.word	0xe000ed00

08000910 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000914:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000916:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000918:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8000abc <HAL_GPIO_Init+0x1ac>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800091c:	4a65      	ldr	r2, [pc, #404]	; (8000ab4 <HAL_GPIO_Init+0x1a4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800091e:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8000ac0 <HAL_GPIO_Init+0x1b0>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000922:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000924:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000926:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800092a:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 800092c:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000930:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000934:	45b6      	cmp	lr, r6
 8000936:	f040 80aa 	bne.w	8000a8e <HAL_GPIO_Init+0x17e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800093a:	684c      	ldr	r4, [r1, #4]
 800093c:	f024 0710 	bic.w	r7, r4, #16
 8000940:	2f02      	cmp	r7, #2
 8000942:	d116      	bne.n	8000972 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000944:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000948:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800094c:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000950:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000954:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000958:	f04f 0c0f 	mov.w	ip, #15
 800095c:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000960:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000964:	690d      	ldr	r5, [r1, #16]
 8000966:	fa05 f50b 	lsl.w	r5, r5, fp
 800096a:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 800096e:	f8ca 5020 	str.w	r5, [sl, #32]
 8000972:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000976:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000978:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800097c:	fa05 f50a 	lsl.w	r5, r5, sl
 8000980:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000982:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000986:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800098a:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800098e:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000990:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000994:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000996:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800099a:	d811      	bhi.n	80009c0 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 800099c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800099e:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80009a2:	68cf      	ldr	r7, [r1, #12]
 80009a4:	fa07 fc0a 	lsl.w	ip, r7, sl
 80009a8:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80009ac:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80009ae:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009b0:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80009b4:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80009b8:	409f      	lsls	r7, r3
 80009ba:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80009be:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80009c0:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80009c2:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009c4:	688f      	ldr	r7, [r1, #8]
 80009c6:	fa07 f70a 	lsl.w	r7, r7, sl
 80009ca:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80009cc:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009ce:	00e5      	lsls	r5, r4, #3
 80009d0:	d55d      	bpl.n	8000a8e <HAL_GPIO_Init+0x17e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d2:	f04f 0b00 	mov.w	fp, #0
 80009d6:	f8cd b00c 	str.w	fp, [sp, #12]
 80009da:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009de:	4d36      	ldr	r5, [pc, #216]	; (8000ab8 <HAL_GPIO_Init+0x1a8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e0:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80009e4:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80009e8:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80009ec:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80009f0:	9703      	str	r7, [sp, #12]
 80009f2:	9f03      	ldr	r7, [sp, #12]
 80009f4:	f023 0703 	bic.w	r7, r3, #3
 80009f8:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80009fc:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a00:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000a04:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a08:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000a0c:	f04f 0e0f 	mov.w	lr, #15
 8000a10:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a14:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a16:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a1a:	d03f      	beq.n	8000a9c <HAL_GPIO_Init+0x18c>
 8000a1c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000a20:	42a8      	cmp	r0, r5
 8000a22:	d03d      	beq.n	8000aa0 <HAL_GPIO_Init+0x190>
 8000a24:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000a28:	42a8      	cmp	r0, r5
 8000a2a:	d03b      	beq.n	8000aa4 <HAL_GPIO_Init+0x194>
 8000a2c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000a30:	42a8      	cmp	r0, r5
 8000a32:	d039      	beq.n	8000aa8 <HAL_GPIO_Init+0x198>
 8000a34:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000a38:	42a8      	cmp	r0, r5
 8000a3a:	d037      	beq.n	8000aac <HAL_GPIO_Init+0x19c>
 8000a3c:	4548      	cmp	r0, r9
 8000a3e:	d037      	beq.n	8000ab0 <HAL_GPIO_Init+0x1a0>
 8000a40:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000a44:	42a8      	cmp	r0, r5
 8000a46:	bf14      	ite	ne
 8000a48:	2507      	movne	r5, #7
 8000a4a:	2506      	moveq	r5, #6
 8000a4c:	fa05 f50c 	lsl.w	r5, r5, ip
 8000a50:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a54:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000a56:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000a58:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a5a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000a5e:	bf0c      	ite	eq
 8000a60:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000a62:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000a64:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000a66:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a68:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000a6c:	bf0c      	ite	eq
 8000a6e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000a70:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000a72:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a74:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a76:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000a7a:	bf0c      	ite	eq
 8000a7c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000a7e:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000a80:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000a82:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a84:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000a86:	bf54      	ite	pl
 8000a88:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000a8a:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000a8c:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a8e:	3301      	adds	r3, #1
 8000a90:	2b10      	cmp	r3, #16
 8000a92:	f47f af48 	bne.w	8000926 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000a96:	b005      	add	sp, #20
 8000a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a9c:	465d      	mov	r5, fp
 8000a9e:	e7d5      	b.n	8000a4c <HAL_GPIO_Init+0x13c>
 8000aa0:	2501      	movs	r5, #1
 8000aa2:	e7d3      	b.n	8000a4c <HAL_GPIO_Init+0x13c>
 8000aa4:	2502      	movs	r5, #2
 8000aa6:	e7d1      	b.n	8000a4c <HAL_GPIO_Init+0x13c>
 8000aa8:	2503      	movs	r5, #3
 8000aaa:	e7cf      	b.n	8000a4c <HAL_GPIO_Init+0x13c>
 8000aac:	2504      	movs	r5, #4
 8000aae:	e7cd      	b.n	8000a4c <HAL_GPIO_Init+0x13c>
 8000ab0:	2505      	movs	r5, #5
 8000ab2:	e7cb      	b.n	8000a4c <HAL_GPIO_Init+0x13c>
 8000ab4:	40013c00 	.word	0x40013c00
 8000ab8:	40020000 	.word	0x40020000
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	40021400 	.word	0x40021400

08000ac4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ac4:	b10a      	cbz	r2, 8000aca <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ac6:	6181      	str	r1, [r0, #24]
 8000ac8:	4770      	bx	lr
 8000aca:	0409      	lsls	r1, r1, #16
 8000acc:	e7fb      	b.n	8000ac6 <HAL_GPIO_WritePin+0x2>
	...

08000ad0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000ad0:	4913      	ldr	r1, [pc, #76]	; (8000b20 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000ad2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000ad4:	688b      	ldr	r3, [r1, #8]
 8000ad6:	f003 030c 	and.w	r3, r3, #12
 8000ada:	2b04      	cmp	r3, #4
 8000adc:	d003      	beq.n	8000ae6 <HAL_RCC_GetSysClockFreq+0x16>
 8000ade:	2b08      	cmp	r3, #8
 8000ae0:	d003      	beq.n	8000aea <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000ae2:	4810      	ldr	r0, [pc, #64]	; (8000b24 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000ae4:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000ae6:	4810      	ldr	r0, [pc, #64]	; (8000b28 <HAL_RCC_GetSysClockFreq+0x58>)
 8000ae8:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000aea:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000aec:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000aee:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000af0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000af4:	bf14      	ite	ne
 8000af6:	480c      	ldrne	r0, [pc, #48]	; (8000b28 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000af8:	480a      	ldreq	r0, [pc, #40]	; (8000b24 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000afa:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000afe:	bf18      	it	ne
 8000b00:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b02:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b06:	fba1 0100 	umull	r0, r1, r1, r0
 8000b0a:	f7ff fb85 	bl	8000218 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000b0e:	4b04      	ldr	r3, [pc, #16]	; (8000b20 <HAL_RCC_GetSysClockFreq+0x50>)
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000b16:	3301      	adds	r3, #1
 8000b18:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000b1a:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b1e:	bd08      	pop	{r3, pc}
 8000b20:	40023800 	.word	0x40023800
 8000b24:	00f42400 	.word	0x00f42400
 8000b28:	017d7840 	.word	0x017d7840

08000b2c <HAL_RCC_ClockConfig>:
{
 8000b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b30:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000b32:	4604      	mov	r4, r0
 8000b34:	b910      	cbnz	r0, 8000b3c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000b36:	2001      	movs	r0, #1
 8000b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000b3c:	4b44      	ldr	r3, [pc, #272]	; (8000c50 <HAL_RCC_ClockConfig+0x124>)
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	f002 020f 	and.w	r2, r2, #15
 8000b44:	428a      	cmp	r2, r1
 8000b46:	d328      	bcc.n	8000b9a <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000b48:	6821      	ldr	r1, [r4, #0]
 8000b4a:	078f      	lsls	r7, r1, #30
 8000b4c:	d42d      	bmi.n	8000baa <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000b4e:	07c8      	lsls	r0, r1, #31
 8000b50:	d440      	bmi.n	8000bd4 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000b52:	4b3f      	ldr	r3, [pc, #252]	; (8000c50 <HAL_RCC_ClockConfig+0x124>)
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	f002 020f 	and.w	r2, r2, #15
 8000b5a:	4295      	cmp	r5, r2
 8000b5c:	d366      	bcc.n	8000c2c <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b5e:	6822      	ldr	r2, [r4, #0]
 8000b60:	0751      	lsls	r1, r2, #29
 8000b62:	d46c      	bmi.n	8000c3e <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b64:	0713      	lsls	r3, r2, #28
 8000b66:	d507      	bpl.n	8000b78 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000b68:	4a3a      	ldr	r2, [pc, #232]	; (8000c54 <HAL_RCC_ClockConfig+0x128>)
 8000b6a:	6921      	ldr	r1, [r4, #16]
 8000b6c:	6893      	ldr	r3, [r2, #8]
 8000b6e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000b72:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000b76:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000b78:	f7ff ffaa 	bl	8000ad0 <HAL_RCC_GetSysClockFreq>
 8000b7c:	4b35      	ldr	r3, [pc, #212]	; (8000c54 <HAL_RCC_ClockConfig+0x128>)
 8000b7e:	4a36      	ldr	r2, [pc, #216]	; (8000c58 <HAL_RCC_ClockConfig+0x12c>)
 8000b80:	689b      	ldr	r3, [r3, #8]
 8000b82:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000b86:	5cd3      	ldrb	r3, [r2, r3]
 8000b88:	40d8      	lsrs	r0, r3
 8000b8a:	4b34      	ldr	r3, [pc, #208]	; (8000c5c <HAL_RCC_ClockConfig+0x130>)
 8000b8c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000b8e:	2000      	movs	r0, #0
 8000b90:	f7ff fcca 	bl	8000528 <HAL_InitTick>
  return HAL_OK;
 8000b94:	2000      	movs	r0, #0
 8000b96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b9a:	b2ca      	uxtb	r2, r1
 8000b9c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f003 030f 	and.w	r3, r3, #15
 8000ba4:	4299      	cmp	r1, r3
 8000ba6:	d1c6      	bne.n	8000b36 <HAL_RCC_ClockConfig+0xa>
 8000ba8:	e7ce      	b.n	8000b48 <HAL_RCC_ClockConfig+0x1c>
 8000baa:	4b2a      	ldr	r3, [pc, #168]	; (8000c54 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000bac:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	689a      	ldrne	r2, [r3, #8]
 8000bb4:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000bb8:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000bba:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000bbc:	bf42      	ittt	mi
 8000bbe:	689a      	ldrmi	r2, [r3, #8]
 8000bc0:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000bc4:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000bc6:	689a      	ldr	r2, [r3, #8]
 8000bc8:	68a0      	ldr	r0, [r4, #8]
 8000bca:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000bce:	4302      	orrs	r2, r0
 8000bd0:	609a      	str	r2, [r3, #8]
 8000bd2:	e7bc      	b.n	8000b4e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000bd4:	6862      	ldr	r2, [r4, #4]
 8000bd6:	4b1f      	ldr	r3, [pc, #124]	; (8000c54 <HAL_RCC_ClockConfig+0x128>)
 8000bd8:	2a01      	cmp	r2, #1
 8000bda:	d11d      	bne.n	8000c18 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000be2:	d0a8      	beq.n	8000b36 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000be4:	4e1b      	ldr	r6, [pc, #108]	; (8000c54 <HAL_RCC_ClockConfig+0x128>)
 8000be6:	68b3      	ldr	r3, [r6, #8]
 8000be8:	f023 0303 	bic.w	r3, r3, #3
 8000bec:	4313      	orrs	r3, r2
 8000bee:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000bf0:	f7ff fce4 	bl	80005bc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000bf4:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000bf8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000bfa:	68b3      	ldr	r3, [r6, #8]
 8000bfc:	6862      	ldr	r2, [r4, #4]
 8000bfe:	f003 030c 	and.w	r3, r3, #12
 8000c02:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000c06:	d0a4      	beq.n	8000b52 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c08:	f7ff fcd8 	bl	80005bc <HAL_GetTick>
 8000c0c:	1bc0      	subs	r0, r0, r7
 8000c0e:	4540      	cmp	r0, r8
 8000c10:	d9f3      	bls.n	8000bfa <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000c12:	2003      	movs	r0, #3
}
 8000c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000c18:	1e91      	subs	r1, r2, #2
 8000c1a:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c1c:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000c1e:	d802      	bhi.n	8000c26 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c20:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000c24:	e7dd      	b.n	8000be2 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c26:	f013 0f02 	tst.w	r3, #2
 8000c2a:	e7da      	b.n	8000be2 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c2c:	b2ea      	uxtb	r2, r5
 8000c2e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f003 030f 	and.w	r3, r3, #15
 8000c36:	429d      	cmp	r5, r3
 8000c38:	f47f af7d 	bne.w	8000b36 <HAL_RCC_ClockConfig+0xa>
 8000c3c:	e78f      	b.n	8000b5e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000c3e:	4905      	ldr	r1, [pc, #20]	; (8000c54 <HAL_RCC_ClockConfig+0x128>)
 8000c40:	68e0      	ldr	r0, [r4, #12]
 8000c42:	688b      	ldr	r3, [r1, #8]
 8000c44:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000c48:	4303      	orrs	r3, r0
 8000c4a:	608b      	str	r3, [r1, #8]
 8000c4c:	e78a      	b.n	8000b64 <HAL_RCC_ClockConfig+0x38>
 8000c4e:	bf00      	nop
 8000c50:	40023c00 	.word	0x40023c00
 8000c54:	40023800 	.word	0x40023800
 8000c58:	08001be0 	.word	0x08001be0
 8000c5c:	20000008 	.word	0x20000008

08000c60 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c60:	6803      	ldr	r3, [r0, #0]
{
 8000c62:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c66:	07dd      	lsls	r5, r3, #31
{
 8000c68:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c6a:	d410      	bmi.n	8000c8e <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c6c:	6823      	ldr	r3, [r4, #0]
 8000c6e:	0798      	lsls	r0, r3, #30
 8000c70:	d45b      	bmi.n	8000d2a <HAL_RCC_OscConfig+0xca>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c72:	6823      	ldr	r3, [r4, #0]
 8000c74:	071a      	lsls	r2, r3, #28
 8000c76:	f100 809d 	bmi.w	8000db4 <HAL_RCC_OscConfig+0x154>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c7a:	6823      	ldr	r3, [r4, #0]
 8000c7c:	075b      	lsls	r3, r3, #29
 8000c7e:	f100 80bb 	bmi.w	8000df8 <HAL_RCC_OscConfig+0x198>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c82:	69a2      	ldr	r2, [r4, #24]
 8000c84:	2a00      	cmp	r2, #0
 8000c86:	f040 811c 	bne.w	8000ec2 <HAL_RCC_OscConfig+0x262>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000c8a:	2000      	movs	r0, #0
 8000c8c:	e015      	b.n	8000cba <HAL_RCC_OscConfig+0x5a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000c8e:	4ba7      	ldr	r3, [pc, #668]	; (8000f2c <HAL_RCC_OscConfig+0x2cc>)
 8000c90:	689a      	ldr	r2, [r3, #8]
 8000c92:	f002 020c 	and.w	r2, r2, #12
 8000c96:	2a04      	cmp	r2, #4
 8000c98:	d007      	beq.n	8000caa <HAL_RCC_OscConfig+0x4a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c9a:	689a      	ldr	r2, [r3, #8]
 8000c9c:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000ca0:	2a08      	cmp	r2, #8
 8000ca2:	d10d      	bne.n	8000cc0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	0259      	lsls	r1, r3, #9
 8000ca8:	d50a      	bpl.n	8000cc0 <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000caa:	4ba0      	ldr	r3, [pc, #640]	; (8000f2c <HAL_RCC_OscConfig+0x2cc>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	039a      	lsls	r2, r3, #14
 8000cb0:	d5dc      	bpl.n	8000c6c <HAL_RCC_OscConfig+0xc>
 8000cb2:	6863      	ldr	r3, [r4, #4]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d1d9      	bne.n	8000c6c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000cb8:	2001      	movs	r0, #1
}
 8000cba:	b002      	add	sp, #8
 8000cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cc0:	6863      	ldr	r3, [r4, #4]
 8000cc2:	4d9a      	ldr	r5, [pc, #616]	; (8000f2c <HAL_RCC_OscConfig+0x2cc>)
 8000cc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cc8:	d111      	bne.n	8000cee <HAL_RCC_OscConfig+0x8e>
 8000cca:	682b      	ldr	r3, [r5, #0]
 8000ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cd0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000cd2:	f7ff fc73 	bl	80005bc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cd6:	4d95      	ldr	r5, [pc, #596]	; (8000f2c <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8000cd8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cda:	682b      	ldr	r3, [r5, #0]
 8000cdc:	039b      	lsls	r3, r3, #14
 8000cde:	d4c5      	bmi.n	8000c6c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ce0:	f7ff fc6c 	bl	80005bc <HAL_GetTick>
 8000ce4:	1b80      	subs	r0, r0, r6
 8000ce6:	2864      	cmp	r0, #100	; 0x64
 8000ce8:	d9f7      	bls.n	8000cda <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8000cea:	2003      	movs	r0, #3
 8000cec:	e7e5      	b.n	8000cba <HAL_RCC_OscConfig+0x5a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000cf2:	d104      	bne.n	8000cfe <HAL_RCC_OscConfig+0x9e>
 8000cf4:	682b      	ldr	r3, [r5, #0]
 8000cf6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cfa:	602b      	str	r3, [r5, #0]
 8000cfc:	e7e5      	b.n	8000cca <HAL_RCC_OscConfig+0x6a>
 8000cfe:	682a      	ldr	r2, [r5, #0]
 8000d00:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000d04:	602a      	str	r2, [r5, #0]
 8000d06:	682a      	ldr	r2, [r5, #0]
 8000d08:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000d0c:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d1df      	bne.n	8000cd2 <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 8000d12:	f7ff fc53 	bl	80005bc <HAL_GetTick>
 8000d16:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d18:	682b      	ldr	r3, [r5, #0]
 8000d1a:	039f      	lsls	r7, r3, #14
 8000d1c:	d5a6      	bpl.n	8000c6c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d1e:	f7ff fc4d 	bl	80005bc <HAL_GetTick>
 8000d22:	1b80      	subs	r0, r0, r6
 8000d24:	2864      	cmp	r0, #100	; 0x64
 8000d26:	d9f7      	bls.n	8000d18 <HAL_RCC_OscConfig+0xb8>
 8000d28:	e7df      	b.n	8000cea <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8000d2a:	4b80      	ldr	r3, [pc, #512]	; (8000f2c <HAL_RCC_OscConfig+0x2cc>)
 8000d2c:	689a      	ldr	r2, [r3, #8]
 8000d2e:	f012 0f0c 	tst.w	r2, #12
 8000d32:	d007      	beq.n	8000d44 <HAL_RCC_OscConfig+0xe4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d34:	689a      	ldr	r2, [r3, #8]
 8000d36:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8000d3a:	2a08      	cmp	r2, #8
 8000d3c:	d111      	bne.n	8000d62 <HAL_RCC_OscConfig+0x102>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	025e      	lsls	r6, r3, #9
 8000d42:	d40e      	bmi.n	8000d62 <HAL_RCC_OscConfig+0x102>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d44:	4b79      	ldr	r3, [pc, #484]	; (8000f2c <HAL_RCC_OscConfig+0x2cc>)
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	0795      	lsls	r5, r2, #30
 8000d4a:	d502      	bpl.n	8000d52 <HAL_RCC_OscConfig+0xf2>
 8000d4c:	68e2      	ldr	r2, [r4, #12]
 8000d4e:	2a01      	cmp	r2, #1
 8000d50:	d1b2      	bne.n	8000cb8 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	6921      	ldr	r1, [r4, #16]
 8000d56:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000d5a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000d5e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d60:	e787      	b.n	8000c72 <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000d62:	68e2      	ldr	r2, [r4, #12]
 8000d64:	4b72      	ldr	r3, [pc, #456]	; (8000f30 <HAL_RCC_OscConfig+0x2d0>)
 8000d66:	b1b2      	cbz	r2, 8000d96 <HAL_RCC_OscConfig+0x136>
        __HAL_RCC_HSI_ENABLE();
 8000d68:	2201      	movs	r2, #1
 8000d6a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d6c:	f7ff fc26 	bl	80005bc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d70:	4d6e      	ldr	r5, [pc, #440]	; (8000f2c <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8000d72:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d74:	682b      	ldr	r3, [r5, #0]
 8000d76:	0798      	lsls	r0, r3, #30
 8000d78:	d507      	bpl.n	8000d8a <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d7a:	682b      	ldr	r3, [r5, #0]
 8000d7c:	6922      	ldr	r2, [r4, #16]
 8000d7e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000d82:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000d86:	602b      	str	r3, [r5, #0]
 8000d88:	e773      	b.n	8000c72 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d8a:	f7ff fc17 	bl	80005bc <HAL_GetTick>
 8000d8e:	1b80      	subs	r0, r0, r6
 8000d90:	2802      	cmp	r0, #2
 8000d92:	d9ef      	bls.n	8000d74 <HAL_RCC_OscConfig+0x114>
 8000d94:	e7a9      	b.n	8000cea <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8000d96:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d98:	f7ff fc10 	bl	80005bc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d9c:	4d63      	ldr	r5, [pc, #396]	; (8000f2c <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8000d9e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000da0:	682b      	ldr	r3, [r5, #0]
 8000da2:	0799      	lsls	r1, r3, #30
 8000da4:	f57f af65 	bpl.w	8000c72 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000da8:	f7ff fc08 	bl	80005bc <HAL_GetTick>
 8000dac:	1b80      	subs	r0, r0, r6
 8000dae:	2802      	cmp	r0, #2
 8000db0:	d9f6      	bls.n	8000da0 <HAL_RCC_OscConfig+0x140>
 8000db2:	e79a      	b.n	8000cea <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000db4:	6962      	ldr	r2, [r4, #20]
 8000db6:	4b5f      	ldr	r3, [pc, #380]	; (8000f34 <HAL_RCC_OscConfig+0x2d4>)
 8000db8:	b17a      	cbz	r2, 8000dda <HAL_RCC_OscConfig+0x17a>
      __HAL_RCC_LSI_ENABLE();
 8000dba:	2201      	movs	r2, #1
 8000dbc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000dbe:	f7ff fbfd 	bl	80005bc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dc2:	4d5a      	ldr	r5, [pc, #360]	; (8000f2c <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8000dc4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dc6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000dc8:	079f      	lsls	r7, r3, #30
 8000dca:	f53f af56 	bmi.w	8000c7a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dce:	f7ff fbf5 	bl	80005bc <HAL_GetTick>
 8000dd2:	1b80      	subs	r0, r0, r6
 8000dd4:	2802      	cmp	r0, #2
 8000dd6:	d9f6      	bls.n	8000dc6 <HAL_RCC_OscConfig+0x166>
 8000dd8:	e787      	b.n	8000cea <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8000dda:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000ddc:	f7ff fbee 	bl	80005bc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000de0:	4d52      	ldr	r5, [pc, #328]	; (8000f2c <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8000de2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000de4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000de6:	0798      	lsls	r0, r3, #30
 8000de8:	f57f af47 	bpl.w	8000c7a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dec:	f7ff fbe6 	bl	80005bc <HAL_GetTick>
 8000df0:	1b80      	subs	r0, r0, r6
 8000df2:	2802      	cmp	r0, #2
 8000df4:	d9f6      	bls.n	8000de4 <HAL_RCC_OscConfig+0x184>
 8000df6:	e778      	b.n	8000cea <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000df8:	4b4c      	ldr	r3, [pc, #304]	; (8000f2c <HAL_RCC_OscConfig+0x2cc>)
 8000dfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dfc:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000e00:	d128      	bne.n	8000e54 <HAL_RCC_OscConfig+0x1f4>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e02:	9201      	str	r2, [sp, #4]
 8000e04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e06:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e0a:	641a      	str	r2, [r3, #64]	; 0x40
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e12:	9301      	str	r3, [sp, #4]
 8000e14:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000e16:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e18:	4d47      	ldr	r5, [pc, #284]	; (8000f38 <HAL_RCC_OscConfig+0x2d8>)
 8000e1a:	682b      	ldr	r3, [r5, #0]
 8000e1c:	05d9      	lsls	r1, r3, #23
 8000e1e:	d51b      	bpl.n	8000e58 <HAL_RCC_OscConfig+0x1f8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e20:	68a3      	ldr	r3, [r4, #8]
 8000e22:	4d42      	ldr	r5, [pc, #264]	; (8000f2c <HAL_RCC_OscConfig+0x2cc>)
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d127      	bne.n	8000e78 <HAL_RCC_OscConfig+0x218>
 8000e28:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000e2a:	f043 0301 	orr.w	r3, r3, #1
 8000e2e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000e30:	f7ff fbc4 	bl	80005bc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e34:	4d3d      	ldr	r5, [pc, #244]	; (8000f2c <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8000e36:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e38:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e3c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000e3e:	079b      	lsls	r3, r3, #30
 8000e40:	d539      	bpl.n	8000eb6 <HAL_RCC_OscConfig+0x256>
    if(pwrclkchanged == SET)
 8000e42:	2e00      	cmp	r6, #0
 8000e44:	f43f af1d 	beq.w	8000c82 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e48:	4a38      	ldr	r2, [pc, #224]	; (8000f2c <HAL_RCC_OscConfig+0x2cc>)
 8000e4a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000e4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e50:	6413      	str	r3, [r2, #64]	; 0x40
 8000e52:	e716      	b.n	8000c82 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000e54:	2600      	movs	r6, #0
 8000e56:	e7df      	b.n	8000e18 <HAL_RCC_OscConfig+0x1b8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e58:	682b      	ldr	r3, [r5, #0]
 8000e5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e5e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000e60:	f7ff fbac 	bl	80005bc <HAL_GetTick>
 8000e64:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e66:	682b      	ldr	r3, [r5, #0]
 8000e68:	05da      	lsls	r2, r3, #23
 8000e6a:	d4d9      	bmi.n	8000e20 <HAL_RCC_OscConfig+0x1c0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e6c:	f7ff fba6 	bl	80005bc <HAL_GetTick>
 8000e70:	1bc0      	subs	r0, r0, r7
 8000e72:	2802      	cmp	r0, #2
 8000e74:	d9f7      	bls.n	8000e66 <HAL_RCC_OscConfig+0x206>
 8000e76:	e738      	b.n	8000cea <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e78:	2b05      	cmp	r3, #5
 8000e7a:	d104      	bne.n	8000e86 <HAL_RCC_OscConfig+0x226>
 8000e7c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000e7e:	f043 0304 	orr.w	r3, r3, #4
 8000e82:	672b      	str	r3, [r5, #112]	; 0x70
 8000e84:	e7d0      	b.n	8000e28 <HAL_RCC_OscConfig+0x1c8>
 8000e86:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000e88:	f022 0201 	bic.w	r2, r2, #1
 8000e8c:	672a      	str	r2, [r5, #112]	; 0x70
 8000e8e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000e90:	f022 0204 	bic.w	r2, r2, #4
 8000e94:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d1ca      	bne.n	8000e30 <HAL_RCC_OscConfig+0x1d0>
      tickstart = HAL_GetTick();
 8000e9a:	f7ff fb8f 	bl	80005bc <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e9e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000ea2:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ea4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000ea6:	0798      	lsls	r0, r3, #30
 8000ea8:	d5cb      	bpl.n	8000e42 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000eaa:	f7ff fb87 	bl	80005bc <HAL_GetTick>
 8000eae:	1bc0      	subs	r0, r0, r7
 8000eb0:	4540      	cmp	r0, r8
 8000eb2:	d9f7      	bls.n	8000ea4 <HAL_RCC_OscConfig+0x244>
 8000eb4:	e719      	b.n	8000cea <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000eb6:	f7ff fb81 	bl	80005bc <HAL_GetTick>
 8000eba:	1bc0      	subs	r0, r0, r7
 8000ebc:	4540      	cmp	r0, r8
 8000ebe:	d9bd      	bls.n	8000e3c <HAL_RCC_OscConfig+0x1dc>
 8000ec0:	e713      	b.n	8000cea <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000ec2:	4d1a      	ldr	r5, [pc, #104]	; (8000f2c <HAL_RCC_OscConfig+0x2cc>)
 8000ec4:	68ab      	ldr	r3, [r5, #8]
 8000ec6:	f003 030c 	and.w	r3, r3, #12
 8000eca:	2b08      	cmp	r3, #8
 8000ecc:	f43f aef4 	beq.w	8000cb8 <HAL_RCC_OscConfig+0x58>
 8000ed0:	4e1a      	ldr	r6, [pc, #104]	; (8000f3c <HAL_RCC_OscConfig+0x2dc>)
 8000ed2:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ed4:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000ed6:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ed8:	d138      	bne.n	8000f4c <HAL_RCC_OscConfig+0x2ec>
        tickstart = HAL_GetTick();
 8000eda:	f7ff fb6f 	bl	80005bc <HAL_GetTick>
 8000ede:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ee0:	682b      	ldr	r3, [r5, #0]
 8000ee2:	0199      	lsls	r1, r3, #6
 8000ee4:	d42c      	bmi.n	8000f40 <HAL_RCC_OscConfig+0x2e0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ee6:	6a22      	ldr	r2, [r4, #32]
 8000ee8:	69e3      	ldr	r3, [r4, #28]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000eee:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000ef2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000ef4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000ef8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000efa:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8000efe:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f00:	4c0a      	ldr	r4, [pc, #40]	; (8000f2c <HAL_RCC_OscConfig+0x2cc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f02:	0852      	lsrs	r2, r2, #1
 8000f04:	3a01      	subs	r2, #1
 8000f06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000f0a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000f10:	f7ff fb54 	bl	80005bc <HAL_GetTick>
 8000f14:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f16:	6823      	ldr	r3, [r4, #0]
 8000f18:	019a      	lsls	r2, r3, #6
 8000f1a:	f53f aeb6 	bmi.w	8000c8a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f1e:	f7ff fb4d 	bl	80005bc <HAL_GetTick>
 8000f22:	1b40      	subs	r0, r0, r5
 8000f24:	2802      	cmp	r0, #2
 8000f26:	d9f6      	bls.n	8000f16 <HAL_RCC_OscConfig+0x2b6>
 8000f28:	e6df      	b.n	8000cea <HAL_RCC_OscConfig+0x8a>
 8000f2a:	bf00      	nop
 8000f2c:	40023800 	.word	0x40023800
 8000f30:	42470000 	.word	0x42470000
 8000f34:	42470e80 	.word	0x42470e80
 8000f38:	40007000 	.word	0x40007000
 8000f3c:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f40:	f7ff fb3c 	bl	80005bc <HAL_GetTick>
 8000f44:	1bc0      	subs	r0, r0, r7
 8000f46:	2802      	cmp	r0, #2
 8000f48:	d9ca      	bls.n	8000ee0 <HAL_RCC_OscConfig+0x280>
 8000f4a:	e6ce      	b.n	8000cea <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8000f4c:	f7ff fb36 	bl	80005bc <HAL_GetTick>
 8000f50:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f52:	682b      	ldr	r3, [r5, #0]
 8000f54:	019b      	lsls	r3, r3, #6
 8000f56:	f57f ae98 	bpl.w	8000c8a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f5a:	f7ff fb2f 	bl	80005bc <HAL_GetTick>
 8000f5e:	1b00      	subs	r0, r0, r4
 8000f60:	2802      	cmp	r0, #2
 8000f62:	d9f6      	bls.n	8000f52 <HAL_RCC_OscConfig+0x2f2>
 8000f64:	e6c1      	b.n	8000cea <HAL_RCC_OscConfig+0x8a>
 8000f66:	bf00      	nop

08000f68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8000f68:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8000f6a:	4604      	mov	r4, r0
 8000f6c:	2800      	cmp	r0, #0
 8000f6e:	d036      	beq.n	8000fde <HAL_SPI_Init+0x76>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f70:	2300      	movs	r3, #0
 8000f72:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8000f74:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8000f78:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f7c:	b91b      	cbnz	r3, 8000f86 <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8000f7e:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8000f82:	f000 fbf9 	bl	8001778 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8000f86:	6821      	ldr	r1, [r4, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000f88:	68a0      	ldr	r0, [r4, #8]
 8000f8a:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8000f92:	680b      	ldr	r3, [r1, #0]
 8000f94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000f98:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000f9a:	6863      	ldr	r3, [r4, #4]
 8000f9c:	4303      	orrs	r3, r0
 8000f9e:	68e0      	ldr	r0, [r4, #12]
 8000fa0:	4303      	orrs	r3, r0
 8000fa2:	6920      	ldr	r0, [r4, #16]
 8000fa4:	4303      	orrs	r3, r0
 8000fa6:	6960      	ldr	r0, [r4, #20]
 8000fa8:	4303      	orrs	r3, r0
 8000faa:	69e0      	ldr	r0, [r4, #28]
 8000fac:	4303      	orrs	r3, r0
 8000fae:	6a20      	ldr	r0, [r4, #32]
 8000fb0:	4303      	orrs	r3, r0
 8000fb2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000fb4:	4303      	orrs	r3, r0
 8000fb6:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8000fba:	4303      	orrs	r3, r0
 8000fbc:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000fbe:	0c12      	lsrs	r2, r2, #16
 8000fc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000fc2:	f002 0204 	and.w	r2, r2, #4
 8000fc6:	431a      	orrs	r2, r3
 8000fc8:	604a      	str	r2, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000fca:	69cb      	ldr	r3, [r1, #28]
 8000fcc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000fd0:	61cb      	str	r3, [r1, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000fd2:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8000fd4:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000fd6:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8000fd8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 8000fdc:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000fde:	2001      	movs	r0, #1
}
 8000fe0:	bd10      	pop	{r4, pc}
	...

08000fe4 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000fe4:	6a03      	ldr	r3, [r0, #32]
 8000fe6:	f023 0301 	bic.w	r3, r3, #1
 8000fea:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000fec:	6a03      	ldr	r3, [r0, #32]
{
 8000fee:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000ff0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000ff2:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000ff4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8000ff6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8000ffa:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8000ffc:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8000ffe:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001002:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001004:	4d0e      	ldr	r5, [pc, #56]	; (8001040 <TIM_OC1_SetConfig+0x5c>)
 8001006:	42a8      	cmp	r0, r5
 8001008:	d002      	beq.n	8001010 <TIM_OC1_SetConfig+0x2c>
 800100a:	4e0e      	ldr	r6, [pc, #56]	; (8001044 <TIM_OC1_SetConfig+0x60>)
 800100c:	42b0      	cmp	r0, r6
 800100e:	d110      	bne.n	8001032 <TIM_OC1_SetConfig+0x4e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001010:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001012:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001016:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001018:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 800101a:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800101e:	d002      	beq.n	8001026 <TIM_OC1_SetConfig+0x42>
 8001020:	4d08      	ldr	r5, [pc, #32]	; (8001044 <TIM_OC1_SetConfig+0x60>)
 8001022:	42a8      	cmp	r0, r5
 8001024:	d105      	bne.n	8001032 <TIM_OC1_SetConfig+0x4e>
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001026:	694d      	ldr	r5, [r1, #20]
 8001028:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800102a:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800102e:	4335      	orrs	r5, r6
 8001030:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001032:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001034:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001036:	684a      	ldr	r2, [r1, #4]
 8001038:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800103a:	6203      	str	r3, [r0, #32]
 800103c:	bd70      	pop	{r4, r5, r6, pc}
 800103e:	bf00      	nop
 8001040:	40010000 	.word	0x40010000
 8001044:	40010400 	.word	0x40010400

08001048 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001048:	6a03      	ldr	r3, [r0, #32]
 800104a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800104e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001050:	6a03      	ldr	r3, [r0, #32]
{
 8001052:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001054:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001056:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001058:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800105a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800105e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001060:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001062:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001066:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800106a:	4d11      	ldr	r5, [pc, #68]	; (80010b0 <TIM_OC3_SetConfig+0x68>)
 800106c:	42a8      	cmp	r0, r5
 800106e:	d003      	beq.n	8001078 <TIM_OC3_SetConfig+0x30>
 8001070:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001074:	42a8      	cmp	r0, r5
 8001076:	d114      	bne.n	80010a2 <TIM_OC3_SetConfig+0x5a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001078:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800107a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800107e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001082:	4d0b      	ldr	r5, [pc, #44]	; (80010b0 <TIM_OC3_SetConfig+0x68>)
 8001084:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8001086:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800108a:	d003      	beq.n	8001094 <TIM_OC3_SetConfig+0x4c>
 800108c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001090:	42a8      	cmp	r0, r5
 8001092:	d106      	bne.n	80010a2 <TIM_OC3_SetConfig+0x5a>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001094:	694d      	ldr	r5, [r1, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001096:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001098:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800109c:	4335      	orrs	r5, r6
 800109e:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80010a2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80010a4:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80010a6:	684a      	ldr	r2, [r1, #4]
 80010a8:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80010aa:	6203      	str	r3, [r0, #32]
 80010ac:	bd70      	pop	{r4, r5, r6, pc}
 80010ae:	bf00      	nop
 80010b0:	40010000 	.word	0x40010000

080010b4 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80010b4:	6a03      	ldr	r3, [r0, #32]
 80010b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80010ba:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80010bc:	6a03      	ldr	r3, [r0, #32]
{
 80010be:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80010c0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80010c2:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80010c4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80010c6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80010ca:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80010ce:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80010d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80010d4:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80010d8:	4d08      	ldr	r5, [pc, #32]	; (80010fc <TIM_OC4_SetConfig+0x48>)
 80010da:	42a8      	cmp	r0, r5
 80010dc:	d003      	beq.n	80010e6 <TIM_OC4_SetConfig+0x32>
 80010de:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80010e2:	42a8      	cmp	r0, r5
 80010e4:	d104      	bne.n	80010f0 <TIM_OC4_SetConfig+0x3c>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80010e6:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80010e8:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80010ec:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80010f0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80010f2:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80010f4:	684a      	ldr	r2, [r1, #4]
 80010f6:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80010f8:	6203      	str	r3, [r0, #32]
 80010fa:	bd30      	pop	{r4, r5, pc}
 80010fc:	40010000 	.word	0x40010000

08001100 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001100:	4a30      	ldr	r2, [pc, #192]	; (80011c4 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8001102:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001104:	4290      	cmp	r0, r2
 8001106:	d012      	beq.n	800112e <TIM_Base_SetConfig+0x2e>
 8001108:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800110c:	d00f      	beq.n	800112e <TIM_Base_SetConfig+0x2e>
 800110e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001112:	4290      	cmp	r0, r2
 8001114:	d00b      	beq.n	800112e <TIM_Base_SetConfig+0x2e>
 8001116:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800111a:	4290      	cmp	r0, r2
 800111c:	d007      	beq.n	800112e <TIM_Base_SetConfig+0x2e>
 800111e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001122:	4290      	cmp	r0, r2
 8001124:	d003      	beq.n	800112e <TIM_Base_SetConfig+0x2e>
 8001126:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800112a:	4290      	cmp	r0, r2
 800112c:	d119      	bne.n	8001162 <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 800112e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001130:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001134:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001136:	4a23      	ldr	r2, [pc, #140]	; (80011c4 <TIM_Base_SetConfig+0xc4>)
 8001138:	4290      	cmp	r0, r2
 800113a:	d029      	beq.n	8001190 <TIM_Base_SetConfig+0x90>
 800113c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001140:	d026      	beq.n	8001190 <TIM_Base_SetConfig+0x90>
 8001142:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001146:	4290      	cmp	r0, r2
 8001148:	d022      	beq.n	8001190 <TIM_Base_SetConfig+0x90>
 800114a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800114e:	4290      	cmp	r0, r2
 8001150:	d01e      	beq.n	8001190 <TIM_Base_SetConfig+0x90>
 8001152:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001156:	4290      	cmp	r0, r2
 8001158:	d01a      	beq.n	8001190 <TIM_Base_SetConfig+0x90>
 800115a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800115e:	4290      	cmp	r0, r2
 8001160:	d016      	beq.n	8001190 <TIM_Base_SetConfig+0x90>
 8001162:	4a19      	ldr	r2, [pc, #100]	; (80011c8 <TIM_Base_SetConfig+0xc8>)
 8001164:	4290      	cmp	r0, r2
 8001166:	d013      	beq.n	8001190 <TIM_Base_SetConfig+0x90>
 8001168:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800116c:	4290      	cmp	r0, r2
 800116e:	d00f      	beq.n	8001190 <TIM_Base_SetConfig+0x90>
 8001170:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001174:	4290      	cmp	r0, r2
 8001176:	d00b      	beq.n	8001190 <TIM_Base_SetConfig+0x90>
 8001178:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800117c:	4290      	cmp	r0, r2
 800117e:	d007      	beq.n	8001190 <TIM_Base_SetConfig+0x90>
 8001180:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001184:	4290      	cmp	r0, r2
 8001186:	d003      	beq.n	8001190 <TIM_Base_SetConfig+0x90>
 8001188:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800118c:	4290      	cmp	r0, r2
 800118e:	d103      	bne.n	8001198 <TIM_Base_SetConfig+0x98>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001190:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001192:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001196:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001198:	694a      	ldr	r2, [r1, #20]
 800119a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800119e:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80011a0:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80011a2:	688b      	ldr	r3, [r1, #8]
 80011a4:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80011a6:	680b      	ldr	r3, [r1, #0]
 80011a8:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80011aa:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <TIM_Base_SetConfig+0xc4>)
 80011ac:	4298      	cmp	r0, r3
 80011ae:	d003      	beq.n	80011b8 <TIM_Base_SetConfig+0xb8>
 80011b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80011b4:	4298      	cmp	r0, r3
 80011b6:	d101      	bne.n	80011bc <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 80011b8:	690b      	ldr	r3, [r1, #16]
 80011ba:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80011bc:	2301      	movs	r3, #1
 80011be:	6143      	str	r3, [r0, #20]
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	40010000 	.word	0x40010000
 80011c8:	40014000 	.word	0x40014000

080011cc <HAL_TIM_Base_Init>:
{
 80011cc:	b510      	push	{r4, lr}
  if (htim == NULL)
 80011ce:	4604      	mov	r4, r0
 80011d0:	b1a0      	cbz	r0, 80011fc <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80011d2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80011d6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80011da:	b91b      	cbnz	r3, 80011e4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80011dc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80011e0:	f000 fb88 	bl	80018f4 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80011e4:	2302      	movs	r3, #2
 80011e6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80011ea:	6820      	ldr	r0, [r4, #0]
 80011ec:	1d21      	adds	r1, r4, #4
 80011ee:	f7ff ff87 	bl	8001100 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80011f2:	2301      	movs	r3, #1
 80011f4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80011f8:	2000      	movs	r0, #0
 80011fa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80011fc:	2001      	movs	r0, #1
}
 80011fe:	bd10      	pop	{r4, pc}

08001200 <HAL_TIM_PWM_Init>:
{
 8001200:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001202:	4604      	mov	r4, r0
 8001204:	b1a0      	cbz	r0, 8001230 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001206:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800120a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800120e:	b91b      	cbnz	r3, 8001218 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001210:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001214:	f000 fb84 	bl	8001920 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001218:	2302      	movs	r3, #2
 800121a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800121e:	6820      	ldr	r0, [r4, #0]
 8001220:	1d21      	adds	r1, r4, #4
 8001222:	f7ff ff6d 	bl	8001100 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001226:	2301      	movs	r3, #1
 8001228:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800122c:	2000      	movs	r0, #0
 800122e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001230:	2001      	movs	r0, #1
}
 8001232:	bd10      	pop	{r4, pc}

08001234 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001234:	6a03      	ldr	r3, [r0, #32]
 8001236:	f023 0310 	bic.w	r3, r3, #16
 800123a:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800123c:	6a03      	ldr	r3, [r0, #32]
{
 800123e:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 8001240:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001242:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001244:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001246:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800124a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800124e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001250:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001254:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001258:	4d10      	ldr	r5, [pc, #64]	; (800129c <TIM_OC2_SetConfig+0x68>)
 800125a:	42a8      	cmp	r0, r5
 800125c:	d003      	beq.n	8001266 <TIM_OC2_SetConfig+0x32>
 800125e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001262:	42a8      	cmp	r0, r5
 8001264:	d114      	bne.n	8001290 <TIM_OC2_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001266:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001268:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800126c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001270:	4d0a      	ldr	r5, [pc, #40]	; (800129c <TIM_OC2_SetConfig+0x68>)
 8001272:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8001274:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001278:	d003      	beq.n	8001282 <TIM_OC2_SetConfig+0x4e>
 800127a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800127e:	42a8      	cmp	r0, r5
 8001280:	d106      	bne.n	8001290 <TIM_OC2_SetConfig+0x5c>
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001282:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001284:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001286:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800128a:	4335      	orrs	r5, r6
 800128c:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8001290:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001292:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001294:	684a      	ldr	r2, [r1, #4]
 8001296:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001298:	6203      	str	r3, [r0, #32]
 800129a:	bd70      	pop	{r4, r5, r6, pc}
 800129c:	40010000 	.word	0x40010000

080012a0 <HAL_TIM_PWM_ConfigChannel>:
{
 80012a0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80012a2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80012a6:	2b01      	cmp	r3, #1
{
 80012a8:	4604      	mov	r4, r0
 80012aa:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80012ae:	d025      	beq.n	80012fc <HAL_TIM_PWM_ConfigChannel+0x5c>
 80012b0:	2301      	movs	r3, #1
 80012b2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80012b6:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 80012ba:	2a0c      	cmp	r2, #12
 80012bc:	d818      	bhi.n	80012f0 <HAL_TIM_PWM_ConfigChannel+0x50>
 80012be:	e8df f002 	tbb	[pc, r2]
 80012c2:	1707      	.short	0x1707
 80012c4:	171e1717 	.word	0x171e1717
 80012c8:	172f1717 	.word	0x172f1717
 80012cc:	1717      	.short	0x1717
 80012ce:	40          	.byte	0x40
 80012cf:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80012d0:	6820      	ldr	r0, [r4, #0]
 80012d2:	f7ff fe87 	bl	8000fe4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80012d6:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80012d8:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80012da:	699a      	ldr	r2, [r3, #24]
 80012dc:	f042 0208 	orr.w	r2, r2, #8
 80012e0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80012e2:	699a      	ldr	r2, [r3, #24]
 80012e4:	f022 0204 	bic.w	r2, r2, #4
 80012e8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80012ea:	699a      	ldr	r2, [r3, #24]
 80012ec:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80012ee:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80012f0:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80012f2:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80012f4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80012f8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80012fc:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80012fe:	6820      	ldr	r0, [r4, #0]
 8001300:	f7ff ff98 	bl	8001234 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001304:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001306:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001308:	699a      	ldr	r2, [r3, #24]
 800130a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800130e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001310:	699a      	ldr	r2, [r3, #24]
 8001312:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001316:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001318:	699a      	ldr	r2, [r3, #24]
 800131a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800131e:	e7e6      	b.n	80012ee <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001320:	6820      	ldr	r0, [r4, #0]
 8001322:	f7ff fe91 	bl	8001048 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001326:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001328:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800132a:	69da      	ldr	r2, [r3, #28]
 800132c:	f042 0208 	orr.w	r2, r2, #8
 8001330:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001332:	69da      	ldr	r2, [r3, #28]
 8001334:	f022 0204 	bic.w	r2, r2, #4
 8001338:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800133a:	69da      	ldr	r2, [r3, #28]
 800133c:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800133e:	61da      	str	r2, [r3, #28]
      break;
 8001340:	e7d6      	b.n	80012f0 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001342:	6820      	ldr	r0, [r4, #0]
 8001344:	f7ff feb6 	bl	80010b4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001348:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800134a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800134c:	69da      	ldr	r2, [r3, #28]
 800134e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001352:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001354:	69da      	ldr	r2, [r3, #28]
 8001356:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800135a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800135c:	69da      	ldr	r2, [r3, #28]
 800135e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001362:	e7ec      	b.n	800133e <HAL_TIM_PWM_ConfigChannel+0x9e>

08001364 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001364:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001366:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001368:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800136a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800136e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8001372:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001374:	6083      	str	r3, [r0, #8]
 8001376:	bd10      	pop	{r4, pc}

08001378 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001378:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800137c:	2b01      	cmp	r3, #1
{
 800137e:	b570      	push	{r4, r5, r6, lr}
 8001380:	4604      	mov	r4, r0
 8001382:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001386:	d019      	beq.n	80013bc <HAL_TIM_ConfigClockSource+0x44>
  htim->State = HAL_TIM_STATE_BUSY;
 8001388:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800138c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 800138e:	2301      	movs	r3, #1
 8001390:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001394:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001396:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800139a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800139e:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80013a0:	680b      	ldr	r3, [r1, #0]
 80013a2:	2b40      	cmp	r3, #64	; 0x40
 80013a4:	d065      	beq.n	8001472 <HAL_TIM_ConfigClockSource+0xfa>
 80013a6:	d815      	bhi.n	80013d4 <HAL_TIM_ConfigClockSource+0x5c>
 80013a8:	2b10      	cmp	r3, #16
 80013aa:	d00c      	beq.n	80013c6 <HAL_TIM_ConfigClockSource+0x4e>
 80013ac:	d807      	bhi.n	80013be <HAL_TIM_ConfigClockSource+0x46>
 80013ae:	b153      	cbz	r3, 80013c6 <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 80013b0:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80013b2:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80013b4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80013b8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80013bc:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80013be:	2b20      	cmp	r3, #32
 80013c0:	d001      	beq.n	80013c6 <HAL_TIM_ConfigClockSource+0x4e>
 80013c2:	2b30      	cmp	r3, #48	; 0x30
 80013c4:	d1f4      	bne.n	80013b0 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 80013c6:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80013c8:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 80013cc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80013d0:	4313      	orrs	r3, r2
 80013d2:	e01a      	b.n	800140a <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 80013d4:	2b60      	cmp	r3, #96	; 0x60
 80013d6:	d034      	beq.n	8001442 <HAL_TIM_ConfigClockSource+0xca>
 80013d8:	d819      	bhi.n	800140e <HAL_TIM_ConfigClockSource+0x96>
 80013da:	2b50      	cmp	r3, #80	; 0x50
 80013dc:	d1e8      	bne.n	80013b0 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80013de:	684a      	ldr	r2, [r1, #4]
 80013e0:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80013e2:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80013e4:	6a05      	ldr	r5, [r0, #32]
 80013e6:	f025 0501 	bic.w	r5, r5, #1
 80013ea:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80013ec:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80013ee:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80013f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80013f6:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80013fa:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80013fc:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80013fe:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001400:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001406:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800140a:	6083      	str	r3, [r0, #8]
 800140c:	e7d0      	b.n	80013b0 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 800140e:	2b70      	cmp	r3, #112	; 0x70
 8001410:	d00c      	beq.n	800142c <HAL_TIM_ConfigClockSource+0xb4>
 8001412:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001416:	d1cb      	bne.n	80013b0 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8001418:	68cb      	ldr	r3, [r1, #12]
 800141a:	684a      	ldr	r2, [r1, #4]
 800141c:	6889      	ldr	r1, [r1, #8]
 800141e:	f7ff ffa1 	bl	8001364 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001422:	6822      	ldr	r2, [r4, #0]
 8001424:	6893      	ldr	r3, [r2, #8]
 8001426:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800142a:	e008      	b.n	800143e <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 800142c:	68cb      	ldr	r3, [r1, #12]
 800142e:	684a      	ldr	r2, [r1, #4]
 8001430:	6889      	ldr	r1, [r1, #8]
 8001432:	f7ff ff97 	bl	8001364 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001436:	6822      	ldr	r2, [r4, #0]
 8001438:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800143a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800143e:	6093      	str	r3, [r2, #8]
      break;
 8001440:	e7b6      	b.n	80013b0 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001442:	684d      	ldr	r5, [r1, #4]
 8001444:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001446:	6a01      	ldr	r1, [r0, #32]
 8001448:	f021 0110 	bic.w	r1, r1, #16
 800144c:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800144e:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8001450:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001452:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001456:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800145a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800145e:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001462:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001464:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001466:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001468:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800146c:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8001470:	e7cb      	b.n	800140a <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001472:	684a      	ldr	r2, [r1, #4]
 8001474:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001476:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001478:	6a05      	ldr	r5, [r0, #32]
 800147a:	f025 0501 	bic.w	r5, r5, #1
 800147e:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001480:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001482:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001486:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800148a:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800148e:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001490:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001492:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001494:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800149a:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 800149e:	e7b4      	b.n	800140a <HAL_TIM_ConfigClockSource+0x92>

080014a0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80014a0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80014a4:	2b01      	cmp	r3, #1
{
 80014a6:	b530      	push	{r4, r5, lr}
 80014a8:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80014ac:	d014      	beq.n	80014d8 <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80014ae:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80014b0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 80014b4:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80014b6:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80014b8:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80014ba:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 80014bc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 80014c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80014c4:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80014c6:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80014c8:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80014ca:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80014cc:	2301      	movs	r3, #1
 80014ce:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80014d2:	2300      	movs	r3, #0
 80014d4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80014d8:	4618      	mov	r0, r3

  return HAL_OK;
}
 80014da:	bd30      	pop	{r4, r5, pc}

080014dc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80014dc:	b530      	push	{r4, r5, lr}
 80014de:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 80014e0:	2210      	movs	r2, #16
 80014e2:	2100      	movs	r1, #0
 80014e4:	4668      	mov	r0, sp
 80014e6:	f000 fb67 	bl	8001bb8 <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80014ea:	4812      	ldr	r0, [pc, #72]	; (8001534 <MX_ADC1_Init+0x58>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80014ec:	4b12      	ldr	r3, [pc, #72]	; (8001538 <MX_ADC1_Init+0x5c>)
 80014ee:	2400      	movs	r4, #0
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
 80014f0:	2501      	movs	r5, #1
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80014f2:	e880 0018 	stmia.w	r0, {r3, r4}
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014f6:	4b11      	ldr	r3, [pc, #68]	; (800153c <MX_ADC1_Init+0x60>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014f8:	6084      	str	r4, [r0, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80014fa:	6104      	str	r4, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014fc:	7604      	strb	r4, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014fe:	f880 4020 	strb.w	r4, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001502:	62c4      	str	r4, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001504:	6283      	str	r3, [r0, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001506:	60c4      	str	r4, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001508:	61c5      	str	r5, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800150a:	f880 4030 	strb.w	r4, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800150e:	6145      	str	r5, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001510:	f7ff f85a 	bl	80005c8 <HAL_ADC_Init>
 8001514:	b108      	cbz	r0, 800151a <MX_ADC1_Init+0x3e>
  {
    Error_Handler();
 8001516:	f000 f8e9 	bl	80016ec <Error_Handler>
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800151a:	4669      	mov	r1, sp
 800151c:	4805      	ldr	r0, [pc, #20]	; (8001534 <MX_ADC1_Init+0x58>)
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800151e:	9402      	str	r4, [sp, #8]
  sConfig.Rank = 1;
 8001520:	e88d 0030 	stmia.w	sp, {r4, r5}
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001524:	f7ff f8f6 	bl	8000714 <HAL_ADC_ConfigChannel>
 8001528:	b108      	cbz	r0, 800152e <MX_ADC1_Init+0x52>
  {
    Error_Handler();
 800152a:	f000 f8df 	bl	80016ec <Error_Handler>
  }

}
 800152e:	b005      	add	sp, #20
 8001530:	bd30      	pop	{r4, r5, pc}
 8001532:	bf00      	nop
 8001534:	2000002c 	.word	0x2000002c
 8001538:	40012000 	.word	0x40012000
 800153c:	0f000001 	.word	0x0f000001

08001540 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001540:	b530      	push	{r4, r5, lr}
 8001542:	4604      	mov	r4, r0
 8001544:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001546:	2214      	movs	r2, #20
 8001548:	2100      	movs	r1, #0
 800154a:	a803      	add	r0, sp, #12
 800154c:	f000 fb34 	bl	8001bb8 <memset>
  if(adcHandle->Instance==ADC1)
 8001550:	6822      	ldr	r2, [r4, #0]
 8001552:	4b1b      	ldr	r3, [pc, #108]	; (80015c0 <HAL_ADC_MspInit+0x80>)
 8001554:	429a      	cmp	r2, r3
 8001556:	d130      	bne.n	80015ba <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001558:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 800155c:	2400      	movs	r4, #0
 800155e:	9400      	str	r4, [sp, #0]
 8001560:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = SEN_RF_Pin|SEN_R_Pin|SEN_L_Pin|SEN_LF_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001562:	4818      	ldr	r0, [pc, #96]	; (80015c4 <HAL_ADC_MspInit+0x84>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001564:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001568:	645a      	str	r2, [r3, #68]	; 0x44
 800156a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800156c:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001570:	9200      	str	r2, [sp, #0]
 8001572:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001574:	9401      	str	r4, [sp, #4]
 8001576:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001578:	f042 0201 	orr.w	r2, r2, #1
 800157c:	631a      	str	r2, [r3, #48]	; 0x30
 800157e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001580:	f002 0201 	and.w	r2, r2, #1
 8001584:	9201      	str	r2, [sp, #4]
 8001586:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001588:	9402      	str	r4, [sp, #8]
 800158a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800158c:	f042 0202 	orr.w	r2, r2, #2
 8001590:	631a      	str	r2, [r3, #48]	; 0x30
 8001592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	9302      	str	r3, [sp, #8]
 800159a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800159c:	2503      	movs	r5, #3
    GPIO_InitStruct.Pin = SEN_RF_Pin|SEN_R_Pin|SEN_L_Pin|SEN_LF_Pin;
 800159e:	230f      	movs	r3, #15
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a0:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = SEN_RF_Pin|SEN_R_Pin|SEN_L_Pin|SEN_LF_Pin;
 80015a2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015a4:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a6:	f7ff f9b3 	bl	8000910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Battery_Pin;
 80015aa:	2302      	movs	r3, #2
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(Battery_GPIO_Port, &GPIO_InitStruct);
 80015ac:	a903      	add	r1, sp, #12
 80015ae:	4806      	ldr	r0, [pc, #24]	; (80015c8 <HAL_ADC_MspInit+0x88>)
    GPIO_InitStruct.Pin = Battery_Pin;
 80015b0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015b2:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(Battery_GPIO_Port, &GPIO_InitStruct);
 80015b6:	f7ff f9ab 	bl	8000910 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80015ba:	b009      	add	sp, #36	; 0x24
 80015bc:	bd30      	pop	{r4, r5, pc}
 80015be:	bf00      	nop
 80015c0:	40012000 	.word	0x40012000
 80015c4:	40020000 	.word	0x40020000
 80015c8:	40020400 	.word	0x40020400

080015cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80015cc:	b530      	push	{r4, r5, lr}
 80015ce:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d0:	2214      	movs	r2, #20
 80015d2:	2100      	movs	r1, #0
 80015d4:	a803      	add	r0, sp, #12
 80015d6:	f000 faef 	bl	8001bb8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015da:	2400      	movs	r4, #0
 80015dc:	4b19      	ldr	r3, [pc, #100]	; (8001644 <MX_GPIO_Init+0x78>)
 80015de:	9400      	str	r4, [sp, #0]
 80015e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_L_ENCODER_Pin|CS_R_ENCODER_Pin, GPIO_PIN_RESET);
 80015e2:	4d19      	ldr	r5, [pc, #100]	; (8001648 <MX_GPIO_Init+0x7c>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015e8:	631a      	str	r2, [r3, #48]	; 0x30
 80015ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015ec:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80015f0:	9200      	str	r2, [sp, #0]
 80015f2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f4:	9401      	str	r4, [sp, #4]
 80015f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015f8:	f042 0201 	orr.w	r2, r2, #1
 80015fc:	631a      	str	r2, [r3, #48]	; 0x30
 80015fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001600:	f002 0201 	and.w	r2, r2, #1
 8001604:	9201      	str	r2, [sp, #4]
 8001606:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001608:	9402      	str	r4, [sp, #8]
 800160a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800160c:	f042 0202 	orr.w	r2, r2, #2
 8001610:	631a      	str	r2, [r3, #48]	; 0x30
 8001612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, CS_L_ENCODER_Pin|CS_R_ENCODER_Pin, GPIO_PIN_RESET);
 800161a:	4622      	mov	r2, r4
 800161c:	4628      	mov	r0, r5
 800161e:	f44f 7140 	mov.w	r1, #768	; 0x300
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001622:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, CS_L_ENCODER_Pin|CS_R_ENCODER_Pin, GPIO_PIN_RESET);
 8001624:	f7ff fa4e 	bl	8000ac4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CS_L_ENCODER_Pin|CS_R_ENCODER_Pin;
 8001628:	f44f 7340 	mov.w	r3, #768	; 0x300
 800162c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162e:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001630:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001632:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001634:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001638:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163a:	f7ff f969 	bl	8000910 <HAL_GPIO_Init>

}
 800163e:	b009      	add	sp, #36	; 0x24
 8001640:	bd30      	pop	{r4, r5, pc}
 8001642:	bf00      	nop
 8001644:	40023800 	.word	0x40023800
 8001648:	40020000 	.word	0x40020000

0800164c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800164c:	b510      	push	{r4, lr}
 800164e:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001650:	2234      	movs	r2, #52	; 0x34
 8001652:	2100      	movs	r1, #0
 8001654:	a807      	add	r0, sp, #28
 8001656:	f000 faaf 	bl	8001bb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800165a:	2100      	movs	r1, #0
 800165c:	2214      	movs	r2, #20
 800165e:	a802      	add	r0, sp, #8
 8001660:	f000 faaa 	bl	8001bb8 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001664:	2400      	movs	r4, #0
 8001666:	4b16      	ldr	r3, [pc, #88]	; (80016c0 <SystemClock_Config+0x74>)
 8001668:	9400      	str	r4, [sp, #0]
 800166a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800166c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001670:	641a      	str	r2, [r3, #64]	; 0x40
 8001672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001678:	9300      	str	r3, [sp, #0]
 800167a:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800167c:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <SystemClock_Config+0x78>)
 800167e:	9401      	str	r4, [sp, #4]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800168a:	940d      	str	r4, [sp, #52]	; 0x34
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800168c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001690:	9301      	str	r3, [sp, #4]
 8001692:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001694:	2302      	movs	r3, #2
 8001696:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001698:	2301      	movs	r3, #1
 800169a:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800169c:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800169e:	2310      	movs	r3, #16
 80016a0:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016a2:	f7ff fadd 	bl	8000c60 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016a6:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80016a8:	4621      	mov	r1, r4
 80016aa:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016ac:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80016ae:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016b0:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016b2:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016b4:	9406      	str	r4, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80016b6:	f7ff fa39 	bl	8000b2c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80016ba:	b014      	add	sp, #80	; 0x50
 80016bc:	bd10      	pop	{r4, pc}
 80016be:	bf00      	nop
 80016c0:	40023800 	.word	0x40023800
 80016c4:	40007000 	.word	0x40007000

080016c8 <main>:
{
 80016c8:	b508      	push	{r3, lr}
  HAL_Init();
 80016ca:	f7fe ff51 	bl	8000570 <HAL_Init>
  SystemClock_Config();
 80016ce:	f7ff ffbd 	bl	800164c <SystemClock_Config>
  MX_GPIO_Init();
 80016d2:	f7ff ff7b 	bl	80015cc <MX_GPIO_Init>
  MX_SPI1_Init();
 80016d6:	f000 f80b 	bl	80016f0 <MX_SPI1_Init>
  MX_TIM2_Init();
 80016da:	f000 f993 	bl	8001a04 <MX_TIM2_Init>
  MX_ADC1_Init();
 80016de:	f7ff fefd 	bl	80014dc <MX_ADC1_Init>
  MX_TIM3_Init();
 80016e2:	f000 f9e3 	bl	8001aac <MX_TIM3_Init>
  MX_SPI2_Init();
 80016e6:	f000 f825 	bl	8001734 <MX_SPI2_Init>
 80016ea:	e7fe      	b.n	80016ea <main+0x22>

080016ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016ec:	4770      	bx	lr
	...

080016f0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80016f0:	b508      	push	{r3, lr}

  hspi1.Instance = SPI1;
 80016f2:	480e      	ldr	r0, [pc, #56]	; (800172c <MX_SPI1_Init+0x3c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016f4:	4b0e      	ldr	r3, [pc, #56]	; (8001730 <MX_SPI1_Init+0x40>)
 80016f6:	f44f 7e82 	mov.w	lr, #260	; 0x104
 80016fa:	e880 4008 	stmia.w	r0, {r3, lr}
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016fe:	2300      	movs	r3, #0
 8001700:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001702:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001704:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001706:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001708:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800170c:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800170e:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001710:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001712:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001714:	230a      	movs	r3, #10
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001716:	6182      	str	r2, [r0, #24]
  hspi1.Init.CRCPolynomial = 10;
 8001718:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800171a:	f7ff fc25 	bl	8000f68 <HAL_SPI_Init>
 800171e:	b118      	cbz	r0, 8001728 <MX_SPI1_Init+0x38>
  {
    Error_Handler();
  }

}
 8001720:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001724:	f7ff bfe2 	b.w	80016ec <Error_Handler>
 8001728:	bd08      	pop	{r3, pc}
 800172a:	bf00      	nop
 800172c:	200000cc 	.word	0x200000cc
 8001730:	40013000 	.word	0x40013000

08001734 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001734:	b508      	push	{r3, lr}

  hspi2.Instance = SPI2;
 8001736:	480e      	ldr	r0, [pc, #56]	; (8001770 <MX_SPI2_Init+0x3c>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001738:	4b0e      	ldr	r3, [pc, #56]	; (8001774 <MX_SPI2_Init+0x40>)
 800173a:	f44f 7e82 	mov.w	lr, #260	; 0x104
 800173e:	e880 4008 	stmia.w	r0, {r3, lr}
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001742:	2300      	movs	r3, #0
 8001744:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001746:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001748:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800174a:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800174c:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001750:	61c3      	str	r3, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001752:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001754:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001756:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001758:	230a      	movs	r3, #10
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800175a:	6182      	str	r2, [r0, #24]
  hspi2.Init.CRCPolynomial = 10;
 800175c:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800175e:	f7ff fc03 	bl	8000f68 <HAL_SPI_Init>
 8001762:	b118      	cbz	r0, 800176c <MX_SPI2_Init+0x38>
  {
    Error_Handler();
  }

}
 8001764:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001768:	f7ff bfc0 	b.w	80016ec <Error_Handler>
 800176c:	bd08      	pop	{r3, pc}
 800176e:	bf00      	nop
 8001770:	20000074 	.word	0x20000074
 8001774:	40003800 	.word	0x40003800

08001778 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001778:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800177a:	2214      	movs	r2, #20
{
 800177c:	b08b      	sub	sp, #44	; 0x2c
 800177e:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001780:	2100      	movs	r1, #0
 8001782:	eb0d 0002 	add.w	r0, sp, r2
 8001786:	f000 fa17 	bl	8001bb8 <memset>
  if(spiHandle->Instance==SPI1)
 800178a:	6823      	ldr	r3, [r4, #0]
 800178c:	4a2e      	ldr	r2, [pc, #184]	; (8001848 <HAL_SPI_MspInit+0xd0>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d137      	bne.n	8001802 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001792:	4b2e      	ldr	r3, [pc, #184]	; (800184c <HAL_SPI_MspInit+0xd4>)
    GPIO_InitStruct.Pin = GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001794:	482e      	ldr	r0, [pc, #184]	; (8001850 <HAL_SPI_MspInit+0xd8>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001796:	2400      	movs	r4, #0
 8001798:	9400      	str	r4, [sp, #0]
 800179a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800179c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80017a0:	645a      	str	r2, [r3, #68]	; 0x44
 80017a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80017a4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80017a8:	9200      	str	r2, [sp, #0]
 80017aa:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ac:	9401      	str	r4, [sp, #4]
 80017ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017b0:	f042 0201 	orr.w	r2, r2, #1
 80017b4:	631a      	str	r2, [r3, #48]	; 0x30
 80017b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017b8:	f002 0201 	and.w	r2, r2, #1
 80017bc:	9201      	str	r2, [sp, #4]
 80017be:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c0:	9402      	str	r4, [sp, #8]
 80017c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017c4:	f042 0202 	orr.w	r2, r2, #2
 80017c8:	631a      	str	r2, [r3, #48]	; 0x30
 80017ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017cc:	f003 0302 	and.w	r3, r3, #2
 80017d0:	9302      	str	r3, [sp, #8]
 80017d2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d4:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80017d6:	2320      	movs	r3, #32
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d8:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017da:	2505      	movs	r5, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017dc:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80017de:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e0:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e2:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017e4:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e6:	f7ff f893 	bl	8000910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80017ea:	2330      	movs	r3, #48	; 0x30
 80017ec:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ee:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f0:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f2:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017f4:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f6:	a905      	add	r1, sp, #20
 80017f8:	4816      	ldr	r0, [pc, #88]	; (8001854 <HAL_SPI_MspInit+0xdc>)
 80017fa:	f7ff f889 	bl	8000910 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80017fe:	b00b      	add	sp, #44	; 0x2c
 8001800:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(spiHandle->Instance==SPI2)
 8001802:	4a15      	ldr	r2, [pc, #84]	; (8001858 <HAL_SPI_MspInit+0xe0>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d1fa      	bne.n	80017fe <HAL_SPI_MspInit+0x86>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001808:	4b10      	ldr	r3, [pc, #64]	; (800184c <HAL_SPI_MspInit+0xd4>)
 800180a:	2100      	movs	r1, #0
 800180c:	9103      	str	r1, [sp, #12]
 800180e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001810:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001814:	641a      	str	r2, [r3, #64]	; 0x40
 8001816:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001818:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800181c:	9203      	str	r2, [sp, #12]
 800181e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001820:	9104      	str	r1, [sp, #16]
 8001822:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001824:	f042 0202 	orr.w	r2, r2, #2
 8001828:	631a      	str	r2, [r3, #48]	; 0x30
 800182a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182c:	f003 0302 	and.w	r3, r3, #2
 8001830:	9304      	str	r3, [sp, #16]
 8001832:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8001834:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8001838:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183a:	2302      	movs	r3, #2
 800183c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800183e:	2303      	movs	r3, #3
 8001840:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001842:	2305      	movs	r3, #5
 8001844:	9309      	str	r3, [sp, #36]	; 0x24
 8001846:	e7d6      	b.n	80017f6 <HAL_SPI_MspInit+0x7e>
 8001848:	40013000 	.word	0x40013000
 800184c:	40023800 	.word	0x40023800
 8001850:	40020000 	.word	0x40020000
 8001854:	40020400 	.word	0x40020400
 8001858:	40003800 	.word	0x40003800

0800185c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800185c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800185e:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <HAL_MspInit+0x34>)
 8001860:	2100      	movs	r1, #0
 8001862:	9100      	str	r1, [sp, #0]
 8001864:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001866:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800186a:	645a      	str	r2, [r3, #68]	; 0x44
 800186c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800186e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001872:	9200      	str	r2, [sp, #0]
 8001874:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001876:	9101      	str	r1, [sp, #4]
 8001878:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800187a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800187e:	641a      	str	r2, [r3, #64]	; 0x40
 8001880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001886:	9301      	str	r3, [sp, #4]
 8001888:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800188a:	b002      	add	sp, #8
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	40023800 	.word	0x40023800

08001894 <NMI_Handler>:
 8001894:	4770      	bx	lr

08001896 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001896:	e7fe      	b.n	8001896 <HardFault_Handler>

08001898 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001898:	e7fe      	b.n	8001898 <MemManage_Handler>

0800189a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800189a:	e7fe      	b.n	800189a <BusFault_Handler>

0800189c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800189c:	e7fe      	b.n	800189c <UsageFault_Handler>

0800189e <SVC_Handler>:
 800189e:	4770      	bx	lr

080018a0 <DebugMon_Handler>:
 80018a0:	4770      	bx	lr

080018a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018a2:	4770      	bx	lr

080018a4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018a4:	f7fe be7e 	b.w	80005a4 <HAL_IncTick>

080018a8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018a8:	490f      	ldr	r1, [pc, #60]	; (80018e8 <SystemInit+0x40>)
 80018aa:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80018ae:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80018b6:	4b0d      	ldr	r3, [pc, #52]	; (80018ec <SystemInit+0x44>)
 80018b8:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80018ba:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80018bc:	f042 0201 	orr.w	r2, r2, #1
 80018c0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80018c2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80018ca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80018ce:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80018d0:	4a07      	ldr	r2, [pc, #28]	; (80018f0 <SystemInit+0x48>)
 80018d2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80018da:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80018dc:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018de:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80018e2:	608b      	str	r3, [r1, #8]
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	e000ed00 	.word	0xe000ed00
 80018ec:	40023800 	.word	0x40023800
 80018f0:	24003010 	.word	0x24003010

080018f4 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 80018f4:	6803      	ldr	r3, [r0, #0]
 80018f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 80018fa:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM2)
 80018fc:	d10b      	bne.n	8001916 <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	9301      	str	r3, [sp, #4]
 8001902:	4b06      	ldr	r3, [pc, #24]	; (800191c <HAL_TIM_Base_MspInit+0x28>)
 8001904:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001906:	f042 0201 	orr.w	r2, r2, #1
 800190a:	641a      	str	r2, [r3, #64]	; 0x40
 800190c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	9301      	str	r3, [sp, #4]
 8001914:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001916:	b002      	add	sp, #8
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	40023800 	.word	0x40023800

08001920 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM3)
 8001920:	6802      	ldr	r2, [r0, #0]
 8001922:	4b09      	ldr	r3, [pc, #36]	; (8001948 <HAL_TIM_PWM_MspInit+0x28>)
 8001924:	429a      	cmp	r2, r3
{
 8001926:	b082      	sub	sp, #8
  if(tim_pwmHandle->Instance==TIM3)
 8001928:	d10b      	bne.n	8001942 <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	9301      	str	r3, [sp, #4]
 800192e:	4b07      	ldr	r3, [pc, #28]	; (800194c <HAL_TIM_PWM_MspInit+0x2c>)
 8001930:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001932:	f042 0202 	orr.w	r2, r2, #2
 8001936:	641a      	str	r2, [r3, #64]	; 0x40
 8001938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	9301      	str	r3, [sp, #4]
 8001940:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001942:	b002      	add	sp, #8
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	40000400 	.word	0x40000400
 800194c:	40023800 	.word	0x40023800

08001950 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001950:	b570      	push	{r4, r5, r6, lr}
 8001952:	4604      	mov	r4, r0
 8001954:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001956:	2214      	movs	r2, #20
 8001958:	2100      	movs	r1, #0
 800195a:	a803      	add	r0, sp, #12
 800195c:	f000 f92c 	bl	8001bb8 <memset>
  if(timHandle->Instance==TIM2)
 8001960:	6823      	ldr	r3, [r4, #0]
 8001962:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001966:	d12d      	bne.n	80019c4 <HAL_TIM_MspPostInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001968:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 800196c:	2400      	movs	r4, #0
 800196e:	9400      	str	r4, [sp, #0]
 8001970:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = TIM_MOTER_R_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(TIM_MOTER_R_GPIO_Port, &GPIO_InitStruct);
 8001972:	4820      	ldr	r0, [pc, #128]	; (80019f4 <HAL_TIM_MspPostInit+0xa4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001974:	f042 0201 	orr.w	r2, r2, #1
 8001978:	631a      	str	r2, [r3, #48]	; 0x30
 800197a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800197c:	f002 0201 	and.w	r2, r2, #1
 8001980:	9200      	str	r2, [sp, #0]
 8001982:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001984:	9401      	str	r4, [sp, #4]
 8001986:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001988:	f042 0202 	orr.w	r2, r2, #2
 800198c:	631a      	str	r2, [r3, #48]	; 0x30
 800198e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	9301      	str	r3, [sp, #4]
 8001996:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001998:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = TIM_MOTER_R_Pin;
 800199a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800199e:	2501      	movs	r5, #1
    HAL_GPIO_Init(TIM_MOTER_R_GPIO_Port, &GPIO_InitStruct);
 80019a0:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = TIM_MOTER_R_Pin;
 80019a2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a4:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019a6:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(TIM_MOTER_R_GPIO_Port, &GPIO_InitStruct);
 80019a8:	f7fe ffb2 	bl	8000910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TIM_MOTER_L_Pin;
 80019ac:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(TIM_MOTER_L_GPIO_Port, &GPIO_InitStruct);
 80019ae:	4812      	ldr	r0, [pc, #72]	; (80019f8 <HAL_TIM_MspPostInit+0xa8>)
    GPIO_InitStruct.Pin = TIM_MOTER_L_Pin;
 80019b0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b2:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b6:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019b8:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(TIM_MOTER_L_GPIO_Port, &GPIO_InitStruct);
 80019ba:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = Speaker_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(Speaker_GPIO_Port, &GPIO_InitStruct);
 80019bc:	f7fe ffa8 	bl	8000910 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80019c0:	b008      	add	sp, #32
 80019c2:	bd70      	pop	{r4, r5, r6, pc}
  else if(timHandle->Instance==TIM3)
 80019c4:	4a0d      	ldr	r2, [pc, #52]	; (80019fc <HAL_TIM_MspPostInit+0xac>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d1fa      	bne.n	80019c0 <HAL_TIM_MspPostInit+0x70>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	9302      	str	r3, [sp, #8]
 80019ce:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <HAL_TIM_MspPostInit+0xb0>)
    HAL_GPIO_Init(Speaker_GPIO_Port, &GPIO_InitStruct);
 80019d0:	4808      	ldr	r0, [pc, #32]	; (80019f4 <HAL_TIM_MspPostInit+0xa4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019d4:	f042 0201 	orr.w	r2, r2, #1
 80019d8:	631a      	str	r2, [r3, #48]	; 0x30
 80019da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	9302      	str	r3, [sp, #8]
 80019e2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = Speaker_Pin;
 80019e4:	2380      	movs	r3, #128	; 0x80
 80019e6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e8:	2302      	movs	r3, #2
 80019ea:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019ec:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(Speaker_GPIO_Port, &GPIO_InitStruct);
 80019ee:	a903      	add	r1, sp, #12
 80019f0:	e7e4      	b.n	80019bc <HAL_TIM_MspPostInit+0x6c>
 80019f2:	bf00      	nop
 80019f4:	40020000 	.word	0x40020000
 80019f8:	40020400 	.word	0x40020400
 80019fc:	40000400 	.word	0x40000400
 8001a00:	40023800 	.word	0x40023800

08001a04 <MX_TIM2_Init>:
{
 8001a04:	b510      	push	{r4, lr}
 8001a06:	b08e      	sub	sp, #56	; 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a08:	2210      	movs	r2, #16
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	a803      	add	r0, sp, #12
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a0e:	2400      	movs	r4, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a10:	f000 f8d2 	bl	8001bb8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a14:	221c      	movs	r2, #28
 8001a16:	4621      	mov	r1, r4
 8001a18:	eb0d 0002 	add.w	r0, sp, r2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a1c:	9401      	str	r4, [sp, #4]
 8001a1e:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a20:	f000 f8ca 	bl	8001bb8 <memset>
  htim2.Instance = TIM2;
 8001a24:	4820      	ldr	r0, [pc, #128]	; (8001aa8 <MX_TIM2_Init+0xa4>)
 8001a26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  htim2.Init.Prescaler = 0;
 8001a2a:	e880 0018 	stmia.w	r0, {r3, r4}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a2e:	6084      	str	r4, [r0, #8]
  htim2.Init.Period = 0;
 8001a30:	60c4      	str	r4, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a32:	6104      	str	r4, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a34:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a36:	f7ff fbc9 	bl	80011cc <HAL_TIM_Base_Init>
 8001a3a:	b108      	cbz	r0, 8001a40 <MX_TIM2_Init+0x3c>
    Error_Handler();
 8001a3c:	f7ff fe56 	bl	80016ec <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a44:	a903      	add	r1, sp, #12
 8001a46:	4818      	ldr	r0, [pc, #96]	; (8001aa8 <MX_TIM2_Init+0xa4>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a48:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a4a:	f7ff fc95 	bl	8001378 <HAL_TIM_ConfigClockSource>
 8001a4e:	b108      	cbz	r0, 8001a54 <MX_TIM2_Init+0x50>
    Error_Handler();
 8001a50:	f7ff fe4c 	bl	80016ec <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a54:	4814      	ldr	r0, [pc, #80]	; (8001aa8 <MX_TIM2_Init+0xa4>)
 8001a56:	f7ff fbd3 	bl	8001200 <HAL_TIM_PWM_Init>
 8001a5a:	b108      	cbz	r0, 8001a60 <MX_TIM2_Init+0x5c>
    Error_Handler();
 8001a5c:	f7ff fe46 	bl	80016ec <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a60:	2400      	movs	r4, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a62:	a901      	add	r1, sp, #4
 8001a64:	4810      	ldr	r0, [pc, #64]	; (8001aa8 <MX_TIM2_Init+0xa4>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a66:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a68:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a6a:	f7ff fd19 	bl	80014a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a6e:	b108      	cbz	r0, 8001a74 <MX_TIM2_Init+0x70>
    Error_Handler();
 8001a70:	f7ff fe3c 	bl	80016ec <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a74:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a76:	2200      	movs	r2, #0
 8001a78:	a907      	add	r1, sp, #28
 8001a7a:	480b      	ldr	r0, [pc, #44]	; (8001aa8 <MX_TIM2_Init+0xa4>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a7c:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 8001a7e:	9408      	str	r4, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a80:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a82:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a84:	f7ff fc0c 	bl	80012a0 <HAL_TIM_PWM_ConfigChannel>
 8001a88:	b108      	cbz	r0, 8001a8e <MX_TIM2_Init+0x8a>
    Error_Handler();
 8001a8a:	f7ff fe2f 	bl	80016ec <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a8e:	2204      	movs	r2, #4
 8001a90:	a907      	add	r1, sp, #28
 8001a92:	4805      	ldr	r0, [pc, #20]	; (8001aa8 <MX_TIM2_Init+0xa4>)
 8001a94:	f7ff fc04 	bl	80012a0 <HAL_TIM_PWM_ConfigChannel>
 8001a98:	b108      	cbz	r0, 8001a9e <MX_TIM2_Init+0x9a>
    Error_Handler();
 8001a9a:	f7ff fe27 	bl	80016ec <Error_Handler>
  HAL_TIM_MspPostInit(&htim2);
 8001a9e:	4802      	ldr	r0, [pc, #8]	; (8001aa8 <MX_TIM2_Init+0xa4>)
 8001aa0:	f7ff ff56 	bl	8001950 <HAL_TIM_MspPostInit>
}
 8001aa4:	b00e      	add	sp, #56	; 0x38
 8001aa6:	bd10      	pop	{r4, pc}
 8001aa8:	20000164 	.word	0x20000164

08001aac <MX_TIM3_Init>:
{
 8001aac:	b510      	push	{r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aae:	2400      	movs	r4, #0
{
 8001ab0:	b08a      	sub	sp, #40	; 0x28
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ab2:	221c      	movs	r2, #28
 8001ab4:	4621      	mov	r1, r4
 8001ab6:	a803      	add	r0, sp, #12
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ab8:	9401      	str	r4, [sp, #4]
 8001aba:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001abc:	f000 f87c 	bl	8001bb8 <memset>
  htim3.Instance = TIM3;
 8001ac0:	4814      	ldr	r0, [pc, #80]	; (8001b14 <MX_TIM3_Init+0x68>)
 8001ac2:	4b15      	ldr	r3, [pc, #84]	; (8001b18 <MX_TIM3_Init+0x6c>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ac4:	6084      	str	r4, [r0, #8]
  htim3.Init.Prescaler = 0;
 8001ac6:	e880 0018 	stmia.w	r0, {r3, r4}
  htim3.Init.Period = 0;
 8001aca:	60c4      	str	r4, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001acc:	6104      	str	r4, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ace:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001ad0:	f7ff fb96 	bl	8001200 <HAL_TIM_PWM_Init>
 8001ad4:	b108      	cbz	r0, 8001ada <MX_TIM3_Init+0x2e>
    Error_Handler();
 8001ad6:	f7ff fe09 	bl	80016ec <Error_Handler>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ada:	a901      	add	r1, sp, #4
 8001adc:	480d      	ldr	r0, [pc, #52]	; (8001b14 <MX_TIM3_Init+0x68>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ade:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ae0:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ae2:	f7ff fcdd 	bl	80014a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ae6:	b108      	cbz	r0, 8001aec <MX_TIM3_Init+0x40>
    Error_Handler();
 8001ae8:	f7ff fe00 	bl	80016ec <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001aec:	2360      	movs	r3, #96	; 0x60
 8001aee:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001af0:	2204      	movs	r2, #4
  sConfigOC.Pulse = 0;
 8001af2:	2300      	movs	r3, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001af4:	a903      	add	r1, sp, #12
 8001af6:	4807      	ldr	r0, [pc, #28]	; (8001b14 <MX_TIM3_Init+0x68>)
  sConfigOC.Pulse = 0;
 8001af8:	9304      	str	r3, [sp, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001afa:	9305      	str	r3, [sp, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001afc:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001afe:	f7ff fbcf 	bl	80012a0 <HAL_TIM_PWM_ConfigChannel>
 8001b02:	b108      	cbz	r0, 8001b08 <MX_TIM3_Init+0x5c>
    Error_Handler();
 8001b04:	f7ff fdf2 	bl	80016ec <Error_Handler>
  HAL_TIM_MspPostInit(&htim3);
 8001b08:	4802      	ldr	r0, [pc, #8]	; (8001b14 <MX_TIM3_Init+0x68>)
 8001b0a:	f7ff ff21 	bl	8001950 <HAL_TIM_MspPostInit>
}
 8001b0e:	b00a      	add	sp, #40	; 0x28
 8001b10:	bd10      	pop	{r4, pc}
 8001b12:	bf00      	nop
 8001b14:	20000124 	.word	0x20000124
 8001b18:	40000400 	.word	0x40000400

08001b1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001b1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b54 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001b20:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b22:	e003      	b.n	8001b2c <LoopCopyDataInit>

08001b24 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b24:	4b0c      	ldr	r3, [pc, #48]	; (8001b58 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001b26:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b28:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b2a:	3104      	adds	r1, #4

08001b2c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b2c:	480b      	ldr	r0, [pc, #44]	; (8001b5c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001b2e:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001b30:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b32:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b34:	d3f6      	bcc.n	8001b24 <CopyDataInit>
  ldr  r2, =_sbss
 8001b36:	4a0b      	ldr	r2, [pc, #44]	; (8001b64 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001b38:	e002      	b.n	8001b40 <LoopFillZerobss>

08001b3a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8001b3a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b3c:	f842 3b04 	str.w	r3, [r2], #4

08001b40 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b40:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001b42:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b44:	d3f9      	bcc.n	8001b3a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b46:	f7ff feaf 	bl	80018a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b4a:	f000 f811 	bl	8001b70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b4e:	f7ff fdbb 	bl	80016c8 <main>
  bx  lr    
 8001b52:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001b54:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001b58:	08001c00 	.word	0x08001c00
  ldr  r0, =_sdata
 8001b5c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001b60:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001b64:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001b68:	200001a4 	.word	0x200001a4

08001b6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b6c:	e7fe      	b.n	8001b6c <ADC_IRQHandler>
	...

08001b70 <__libc_init_array>:
 8001b70:	b570      	push	{r4, r5, r6, lr}
 8001b72:	4e0d      	ldr	r6, [pc, #52]	; (8001ba8 <__libc_init_array+0x38>)
 8001b74:	4c0d      	ldr	r4, [pc, #52]	; (8001bac <__libc_init_array+0x3c>)
 8001b76:	1ba4      	subs	r4, r4, r6
 8001b78:	10a4      	asrs	r4, r4, #2
 8001b7a:	2500      	movs	r5, #0
 8001b7c:	42a5      	cmp	r5, r4
 8001b7e:	d109      	bne.n	8001b94 <__libc_init_array+0x24>
 8001b80:	4e0b      	ldr	r6, [pc, #44]	; (8001bb0 <__libc_init_array+0x40>)
 8001b82:	4c0c      	ldr	r4, [pc, #48]	; (8001bb4 <__libc_init_array+0x44>)
 8001b84:	f000 f820 	bl	8001bc8 <_init>
 8001b88:	1ba4      	subs	r4, r4, r6
 8001b8a:	10a4      	asrs	r4, r4, #2
 8001b8c:	2500      	movs	r5, #0
 8001b8e:	42a5      	cmp	r5, r4
 8001b90:	d105      	bne.n	8001b9e <__libc_init_array+0x2e>
 8001b92:	bd70      	pop	{r4, r5, r6, pc}
 8001b94:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001b98:	4798      	blx	r3
 8001b9a:	3501      	adds	r5, #1
 8001b9c:	e7ee      	b.n	8001b7c <__libc_init_array+0xc>
 8001b9e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ba2:	4798      	blx	r3
 8001ba4:	3501      	adds	r5, #1
 8001ba6:	e7f2      	b.n	8001b8e <__libc_init_array+0x1e>
 8001ba8:	08001bf8 	.word	0x08001bf8
 8001bac:	08001bf8 	.word	0x08001bf8
 8001bb0:	08001bf8 	.word	0x08001bf8
 8001bb4:	08001bfc 	.word	0x08001bfc

08001bb8 <memset>:
 8001bb8:	4402      	add	r2, r0
 8001bba:	4603      	mov	r3, r0
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d100      	bne.n	8001bc2 <memset+0xa>
 8001bc0:	4770      	bx	lr
 8001bc2:	f803 1b01 	strb.w	r1, [r3], #1
 8001bc6:	e7f9      	b.n	8001bbc <memset+0x4>

08001bc8 <_init>:
 8001bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bca:	bf00      	nop
 8001bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bce:	bc08      	pop	{r3}
 8001bd0:	469e      	mov	lr, r3
 8001bd2:	4770      	bx	lr

08001bd4 <_fini>:
 8001bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bd6:	bf00      	nop
 8001bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bda:	bc08      	pop	{r3}
 8001bdc:	469e      	mov	lr, r3
 8001bde:	4770      	bx	lr
